
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b34  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004d04  08004d04  00005d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d94  08004d94  00006078  2**0
                  CONTENTS
  4 .ARM          00000008  08004d94  08004d94  00005d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d9c  08004d9c  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d9c  08004d9c  00005d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004da0  08004da0  00005da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08004da4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000078  08004e1c  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08004e1c  0000629c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2f9  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d94  00000000  00000000  000113a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00013138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000908  00000000  00000000  00013cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232a0  00000000  00000000  00014600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9c3  00000000  00000000  000378a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db38d  00000000  00000000  00046263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001215f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036cc  00000000  00000000  00121634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00124d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004cec 	.word	0x08004cec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08004cec 	.word	0x08004cec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b96a 	b.w	8000de8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	460c      	mov	r4, r1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d14e      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b38:	4694      	mov	ip, r2
 8000b3a:	458c      	cmp	ip, r1
 8000b3c:	4686      	mov	lr, r0
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	d962      	bls.n	8000c0a <__udivmoddi4+0xde>
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b54:	4319      	orrs	r1, r3
 8000b56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5e:	fa1f f68c 	uxth.w	r6, ip
 8000b62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb04 f106 	mul.w	r1, r4, r6
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b82:	f080 8112 	bcs.w	8000daa <__udivmoddi4+0x27e>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 810f 	bls.w	8000daa <__udivmoddi4+0x27e>
 8000b8c:	3c02      	subs	r4, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a59      	subs	r1, r3, r1
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb00 f606 	mul.w	r6, r0, r6
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x94>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb2:	f080 80fc 	bcs.w	8000dae <__udivmoddi4+0x282>
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	f240 80f9 	bls.w	8000dae <__udivmoddi4+0x282>
 8000bbc:	4463      	add	r3, ip
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	1b9b      	subs	r3, r3, r6
 8000bc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	b11d      	cbz	r5, 8000bd2 <__udivmoddi4+0xa6>
 8000bca:	40d3      	lsrs	r3, r2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d905      	bls.n	8000be6 <__udivmoddi4+0xba>
 8000bda:	b10d      	cbz	r5, 8000be0 <__udivmoddi4+0xb4>
 8000bdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000be0:	2100      	movs	r1, #0
 8000be2:	4608      	mov	r0, r1
 8000be4:	e7f5      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000be6:	fab3 f183 	clz	r1, r3
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d146      	bne.n	8000c7c <__udivmoddi4+0x150>
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0xcc>
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	f0c0 80f0 	bcc.w	8000dd8 <__udivmoddi4+0x2ac>
 8000bf8:	1a86      	subs	r6, r0, r2
 8000bfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d0e6      	beq.n	8000bd2 <__udivmoddi4+0xa6>
 8000c04:	e9c5 6300 	strd	r6, r3, [r5]
 8000c08:	e7e3      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x204>
 8000c10:	eba1 040c 	sub.w	r4, r1, ip
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	fa1f f78c 	uxth.w	r7, ip
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2e:	fb07 f006 	mul.w	r0, r7, r6
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x11c>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x11a>
 8000c40:	4298      	cmp	r0, r3
 8000c42:	f200 80cd 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c46:	4626      	mov	r6, r4
 8000c48:	1a1c      	subs	r4, r3, r0
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c52:	fb08 4410 	mls	r4, r8, r0, r4
 8000c56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5a:	fb00 f707 	mul.w	r7, r0, r7
 8000c5e:	429f      	cmp	r7, r3
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x148>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x146>
 8000c6c:	429f      	cmp	r7, r3
 8000c6e:	f200 80b0 	bhi.w	8000dd2 <__udivmoddi4+0x2a6>
 8000c72:	4620      	mov	r0, r4
 8000c74:	1bdb      	subs	r3, r3, r7
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	e7a5      	b.n	8000bc8 <__udivmoddi4+0x9c>
 8000c7c:	f1c1 0620 	rsb	r6, r1, #32
 8000c80:	408b      	lsls	r3, r1
 8000c82:	fa22 f706 	lsr.w	r7, r2, r6
 8000c86:	431f      	orrs	r7, r3
 8000c88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c90:	ea43 030c 	orr.w	r3, r3, ip
 8000c94:	40f4      	lsrs	r4, r6
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	0c38      	lsrs	r0, r7, #16
 8000c9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ca4:	fa1f fc87 	uxth.w	ip, r7
 8000ca8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cb4:	45a1      	cmp	r9, r4
 8000cb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x1a6>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cc2:	f080 8084 	bcs.w	8000dce <__udivmoddi4+0x2a2>
 8000cc6:	45a1      	cmp	r9, r4
 8000cc8:	f240 8081 	bls.w	8000dce <__udivmoddi4+0x2a2>
 8000ccc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd0:	443c      	add	r4, r7
 8000cd2:	eba4 0409 	sub.w	r4, r4, r9
 8000cd6:	fa1f f983 	uxth.w	r9, r3
 8000cda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cde:	fb00 4413 	mls	r4, r0, r3, r4
 8000ce2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x1d2>
 8000cee:	193c      	adds	r4, r7, r4
 8000cf0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cf4:	d267      	bcs.n	8000dc6 <__udivmoddi4+0x29a>
 8000cf6:	45a4      	cmp	ip, r4
 8000cf8:	d965      	bls.n	8000dc6 <__udivmoddi4+0x29a>
 8000cfa:	3b02      	subs	r3, #2
 8000cfc:	443c      	add	r4, r7
 8000cfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d02:	fba0 9302 	umull	r9, r3, r0, r2
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	46ce      	mov	lr, r9
 8000d0e:	469c      	mov	ip, r3
 8000d10:	d351      	bcc.n	8000db6 <__udivmoddi4+0x28a>
 8000d12:	d04e      	beq.n	8000db2 <__udivmoddi4+0x286>
 8000d14:	b155      	cbz	r5, 8000d2c <__udivmoddi4+0x200>
 8000d16:	ebb8 030e 	subs.w	r3, r8, lr
 8000d1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d22:	40cb      	lsrs	r3, r1
 8000d24:	431e      	orrs	r6, r3
 8000d26:	40cc      	lsrs	r4, r1
 8000d28:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e750      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f103 	lsr.w	r1, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d40:	4094      	lsls	r4, r2
 8000d42:	430c      	orrs	r4, r1
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d4c:	fa1f f78c 	uxth.w	r7, ip
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3110 	mls	r1, r8, r0, r3
 8000d58:	0c23      	lsrs	r3, r4, #16
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f107 	mul.w	r1, r0, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x24c>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d6e:	d22c      	bcs.n	8000dca <__udivmoddi4+0x29e>
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d92a      	bls.n	8000dca <__udivmoddi4+0x29e>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d80:	fb08 3311 	mls	r3, r8, r1, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb01 f307 	mul.w	r3, r1, r7
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x276>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d98:	d213      	bcs.n	8000dc2 <__udivmoddi4+0x296>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d911      	bls.n	8000dc2 <__udivmoddi4+0x296>
 8000d9e:	3902      	subs	r1, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	1ae4      	subs	r4, r4, r3
 8000da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000da8:	e739      	b.n	8000c1e <__udivmoddi4+0xf2>
 8000daa:	4604      	mov	r4, r0
 8000dac:	e6f0      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e706      	b.n	8000bc0 <__udivmoddi4+0x94>
 8000db2:	45c8      	cmp	r8, r9
 8000db4:	d2ae      	bcs.n	8000d14 <__udivmoddi4+0x1e8>
 8000db6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	e7a8      	b.n	8000d14 <__udivmoddi4+0x1e8>
 8000dc2:	4631      	mov	r1, r6
 8000dc4:	e7ed      	b.n	8000da2 <__udivmoddi4+0x276>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e799      	b.n	8000cfe <__udivmoddi4+0x1d2>
 8000dca:	4630      	mov	r0, r6
 8000dcc:	e7d4      	b.n	8000d78 <__udivmoddi4+0x24c>
 8000dce:	46d6      	mov	lr, sl
 8000dd0:	e77f      	b.n	8000cd2 <__udivmoddi4+0x1a6>
 8000dd2:	4463      	add	r3, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e74d      	b.n	8000c74 <__udivmoddi4+0x148>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	4623      	mov	r3, r4
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e70f      	b.n	8000c00 <__udivmoddi4+0xd4>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	e730      	b.n	8000c48 <__udivmoddi4+0x11c>
 8000de6:	bf00      	nop

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000dec:	b5b0      	push	{r4, r5, r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000dfa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000dfe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 8000e02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000e06:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 8000e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e0a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000e0c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000e0e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f80e 	bl	8000e42 <Lcd_init>

	return lcd;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	461d      	mov	r5, r3
 8000e2a:	f107 0410 	add.w	r4, r7, #16
 8000e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e36:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	3728      	adds	r7, #40	@ 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bdb0      	pop	{r4, r5, r7, pc}

08000e42 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7d9b      	ldrb	r3, [r3, #22]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10c      	bne.n	8000e6c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000e52:	2133      	movs	r1, #51	@ 0x33
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 f87b 	bl	8000f50 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000e5a:	2132      	movs	r1, #50	@ 0x32
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f000 f877 	bl	8000f50 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000e62:	2128      	movs	r1, #40	@ 0x28
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f873 	bl	8000f50 <lcd_write_command>
 8000e6a:	e003      	b.n	8000e74 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000e6c:	2138      	movs	r1, #56	@ 0x38
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 f86e 	bl	8000f50 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000e74:	2101      	movs	r1, #1
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 f86a 	bl	8000f50 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000e7c:	210c      	movs	r1, #12
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 f866 	bl	8000f50 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000e84:	2106      	movs	r1, #6
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f862 	bl	8000f50 <lcd_write_command>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	4906      	ldr	r1, [pc, #24]	@ (8000ec0 <Lcd_int+0x2c>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 fa80 	bl	80043ac <siprintf>

	Lcd_string(lcd, buffer);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 f806 	bl	8000ec4 <Lcd_string>
}
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	08004d04 	.word	0x08004d04

08000ec4 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	e00a      	b.n	8000eea <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f864 	bl	8000fac <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	7bfc      	ldrb	r4, [r7, #15]
 8000eec:	6838      	ldr	r0, [r7, #0]
 8000eee:	f7ff f98f 	bl	8000210 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	429c      	cmp	r4, r3
 8000ef6:	d3ed      	bcc.n	8000ed4 <Lcd_string+0x10>
	}
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd90      	pop	{r4, r7, pc}
	...

08000f04 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
 8000f10:	4613      	mov	r3, r2
 8000f12:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	4a07      	ldr	r2, [pc, #28]	@ (8000f34 <Lcd_cursor+0x30>)
 8000f18:	5cd2      	ldrb	r2, [r2, r3]
 8000f1a:	78bb      	ldrb	r3, [r7, #2]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	3b80      	subs	r3, #128	@ 0x80
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4619      	mov	r1, r3
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 f812 	bl	8000f50 <lcd_write_command>
	#endif
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	08004d4c 	.word	0x08004d4c

08000f38 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000f40:	2101      	movs	r1, #1
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f804 	bl	8000f50 <lcd_write_command>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6898      	ldr	r0, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	899b      	ldrh	r3, [r3, #12]
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	f001 fdf6 	bl	8002b58 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7d9b      	ldrb	r3, [r3, #22]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d111      	bne.n	8000f98 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f842 	bl	8001008 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	4619      	mov	r1, r3
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f839 	bl	8001008 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000f96:	e005      	b.n	8000fa4 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f832 	bl	8001008 <lcd_write>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6898      	ldr	r0, [r3, #8]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	899b      	ldrh	r3, [r3, #12]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f001 fdc8 	bl	8002b58 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7d9b      	ldrb	r3, [r3, #22]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d111      	bne.n	8000ff4 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f814 	bl	8001008 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f80b 	bl	8001008 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000ff2:	e005      	b.n	8001000 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f804 	bl	8001008 <lcd_write>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
 8001014:	4613      	mov	r3, r2
 8001016:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e019      	b.n	8001052 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	8819      	ldrh	r1, [r3, #0]
 8001036:	78fa      	ldrb	r2, [r7, #3]
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	fa42 f303 	asr.w	r3, r2, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	461a      	mov	r2, r3
 8001048:	f001 fd86 	bl	8002b58 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	3301      	adds	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	7bfa      	ldrb	r2, [r7, #15]
 8001054:	78bb      	ldrb	r3, [r7, #2]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3e1      	bcc.n	800101e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6918      	ldr	r0, [r3, #16]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	8a9b      	ldrh	r3, [r3, #20]
 8001062:	2201      	movs	r2, #1
 8001064:	4619      	mov	r1, r3
 8001066:	f001 fd77 	bl	8002b58 <HAL_GPIO_WritePin>
	DELAY(1);
 800106a:	2001      	movs	r0, #1
 800106c:	f000 feae 	bl	8001dcc <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6918      	ldr	r0, [r3, #16]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	8a9b      	ldrh	r3, [r3, #20]
 8001078:	2200      	movs	r2, #0
 800107a:	4619      	mov	r1, r3
 800107c:	f001 fd6c 	bl	8002b58 <HAL_GPIO_WritePin>
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b094      	sub	sp, #80	@ 0x50
 800108c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108e:	f000 fe2b 	bl	8001ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001092:	f000 fa15 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001096:	f000 fb4d 	bl	8001734 <MX_GPIO_Init>
  MX_ADC1_Init();
 800109a:	f000 fa83 	bl	80015a4 <MX_ADC1_Init>
  MX_TIM3_Init();
 800109e:	f000 fad3 	bl	8001648 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_5, GPIOA, GPIO_PIN_6, LCD_4_BIT_MODE);
 80010a2:	4cb5      	ldr	r4, [pc, #724]	@ (8001378 <main+0x2f0>)
 80010a4:	4638      	mov	r0, r7
 80010a6:	2300      	movs	r3, #0
 80010a8:	9303      	str	r3, [sp, #12]
 80010aa:	2340      	movs	r3, #64	@ 0x40
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	4bb3      	ldr	r3, [pc, #716]	@ (800137c <main+0x2f4>)
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	2320      	movs	r3, #32
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	4bb1      	ldr	r3, [pc, #708]	@ (800137c <main+0x2f4>)
 80010b8:	4ab1      	ldr	r2, [pc, #708]	@ (8001380 <main+0x2f8>)
 80010ba:	49b2      	ldr	r1, [pc, #712]	@ (8001384 <main+0x2fc>)
 80010bc:	f7ff fe96 	bl	8000dec <Lcd_create>
 80010c0:	4625      	mov	r5, r4
 80010c2:	463c      	mov	r4, r7
 80010c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010cc:	e885 0003 	stmia.w	r5, {r0, r1}
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010d0:	2104      	movs	r1, #4
 80010d2:	48ad      	ldr	r0, [pc, #692]	@ (8001388 <main+0x300>)
 80010d4:	f002 fb80 	bl	80037d8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Lcd_cursor(&lcd, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	48a6      	ldr	r0, [pc, #664]	@ (8001378 <main+0x2f0>)
 80010de:	f7ff ff11 	bl	8000f04 <Lcd_cursor>
	  Lcd_string(&lcd, "Set Temp Range");
 80010e2:	49aa      	ldr	r1, [pc, #680]	@ (800138c <main+0x304>)
 80010e4:	48a4      	ldr	r0, [pc, #656]	@ (8001378 <main+0x2f0>)
 80010e6:	f7ff feed 	bl	8000ec4 <Lcd_string>

	  ADC_ChannelConfTypeDef sConfig = {0};
 80010ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_10;
 80010f8:	230a      	movs	r3, #10
 80010fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	  sConfig.Rank = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001104:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001108:	4619      	mov	r1, r3
 800110a:	48a1      	ldr	r0, [pc, #644]	@ (8001390 <main+0x308>)
 800110c:	f001 f864 	bl	80021d8 <HAL_ADC_ConfigChannel>
	  HAL_Delay(100);
 8001110:	2064      	movs	r0, #100	@ 0x64
 8001112:	f000 fe5b 	bl	8001dcc <HAL_Delay>

	  HAL_ADC_Start(&hadc1);
 8001116:	489e      	ldr	r0, [pc, #632]	@ (8001390 <main+0x308>)
 8001118:	f000 fec0 	bl	8001e9c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	489b      	ldr	r0, [pc, #620]	@ (8001390 <main+0x308>)
 8001122:	f000 ffc0 	bl	80020a6 <HAL_ADC_PollForConversion>
	  pot_value = HAL_ADC_GetValue(&hadc1);
 8001126:	489a      	ldr	r0, [pc, #616]	@ (8001390 <main+0x308>)
 8001128:	f001 f848 	bl	80021bc <HAL_ADC_GetValue>
 800112c:	4603      	mov	r3, r0
 800112e:	4a99      	ldr	r2, [pc, #612]	@ (8001394 <main+0x30c>)
 8001130:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8001132:	4897      	ldr	r0, [pc, #604]	@ (8001390 <main+0x308>)
 8001134:	f000 ff84 	bl	8002040 <HAL_ADC_Stop>

	  if (pot_value < 1500) {
 8001138:	4b96      	ldr	r3, [pc, #600]	@ (8001394 <main+0x30c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001140:	4293      	cmp	r3, r2
 8001142:	d806      	bhi.n	8001152 <main+0xca>
		  temp_low = 15;
 8001144:	4b94      	ldr	r3, [pc, #592]	@ (8001398 <main+0x310>)
 8001146:	220f      	movs	r2, #15
 8001148:	801a      	strh	r2, [r3, #0]
		  temp_high = 25;
 800114a:	4b94      	ldr	r3, [pc, #592]	@ (800139c <main+0x314>)
 800114c:	2219      	movs	r2, #25
 800114e:	801a      	strh	r2, [r3, #0]
 8001150:	e012      	b.n	8001178 <main+0xf0>
	  } else if (pot_value < 3000) {
 8001152:	4b90      	ldr	r3, [pc, #576]	@ (8001394 <main+0x30c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800115a:	4293      	cmp	r3, r2
 800115c:	d806      	bhi.n	800116c <main+0xe4>
		  temp_low = 20;
 800115e:	4b8e      	ldr	r3, [pc, #568]	@ (8001398 <main+0x310>)
 8001160:	2214      	movs	r2, #20
 8001162:	801a      	strh	r2, [r3, #0]
		  temp_high = 30;
 8001164:	4b8d      	ldr	r3, [pc, #564]	@ (800139c <main+0x314>)
 8001166:	221e      	movs	r2, #30
 8001168:	801a      	strh	r2, [r3, #0]
 800116a:	e005      	b.n	8001178 <main+0xf0>
	  } else {
		  temp_low = 30;
 800116c:	4b8a      	ldr	r3, [pc, #552]	@ (8001398 <main+0x310>)
 800116e:	221e      	movs	r2, #30
 8001170:	801a      	strh	r2, [r3, #0]
		  temp_high = 40;
 8001172:	4b8a      	ldr	r3, [pc, #552]	@ (800139c <main+0x314>)
 8001174:	2228      	movs	r2, #40	@ 0x28
 8001176:	801a      	strh	r2, [r3, #0]
	  }

	  Lcd_cursor(&lcd, 1, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	487e      	ldr	r0, [pc, #504]	@ (8001378 <main+0x2f0>)
 800117e:	f7ff fec1 	bl	8000f04 <Lcd_cursor>
	  Lcd_string(&lcd, "Low:");
 8001182:	4987      	ldr	r1, [pc, #540]	@ (80013a0 <main+0x318>)
 8001184:	487c      	ldr	r0, [pc, #496]	@ (8001378 <main+0x2f0>)
 8001186:	f7ff fe9d 	bl	8000ec4 <Lcd_string>
	  Lcd_int(&lcd, temp_low);
 800118a:	4b83      	ldr	r3, [pc, #524]	@ (8001398 <main+0x310>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	4879      	ldr	r0, [pc, #484]	@ (8001378 <main+0x2f0>)
 8001192:	f7ff fe7f 	bl	8000e94 <Lcd_int>
	  Lcd_string(&lcd, " High:");
 8001196:	4983      	ldr	r1, [pc, #524]	@ (80013a4 <main+0x31c>)
 8001198:	4877      	ldr	r0, [pc, #476]	@ (8001378 <main+0x2f0>)
 800119a:	f7ff fe93 	bl	8000ec4 <Lcd_string>
	  Lcd_int(&lcd, temp_high);
 800119e:	4b7f      	ldr	r3, [pc, #508]	@ (800139c <main+0x314>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	4619      	mov	r1, r3
 80011a4:	4874      	ldr	r0, [pc, #464]	@ (8001378 <main+0x2f0>)
 80011a6:	f7ff fe75 	bl	8000e94 <Lcd_int>

	  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 80011aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ae:	487e      	ldr	r0, [pc, #504]	@ (80013a8 <main+0x320>)
 80011b0:	f001 fcba 	bl	8002b28 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10e      	bne.n	80011d8 <main+0x150>
		  HAL_Delay(50);
 80011ba:	2032      	movs	r0, #50	@ 0x32
 80011bc:	f000 fe06 	bl	8001dcc <HAL_Delay>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET) {
 80011c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011c4:	4878      	ldr	r0, [pc, #480]	@ (80013a8 <main+0x320>)
 80011c6:	f001 fcaf 	bl	8002b28 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d103      	bne.n	80011d8 <main+0x150>
			  Lcd_clear(&lcd);
 80011d0:	4869      	ldr	r0, [pc, #420]	@ (8001378 <main+0x2f0>)
 80011d2:	f7ff feb1 	bl	8000f38 <Lcd_clear>
 80011d6:	e003      	b.n	80011e0 <main+0x158>
			  break;
		  }
	  }

	  HAL_Delay(100);
 80011d8:	2064      	movs	r0, #100	@ 0x64
 80011da:	f000 fdf7 	bl	8001dcc <HAL_Delay>
  {
 80011de:	e77b      	b.n	80010d8 <main+0x50>
  }

  while (1) {
	  ADC_ChannelConfTypeDef sConfig = {0};
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_3;
 80011ee:	2303      	movs	r3, #3
 80011f0:	61bb      	str	r3, [r7, #24]
	  sConfig.Rank = 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61fb      	str	r3, [r7, #28]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	4619      	mov	r1, r3
 8001200:	4863      	ldr	r0, [pc, #396]	@ (8001390 <main+0x308>)
 8001202:	f000 ffe9 	bl	80021d8 <HAL_ADC_ConfigChannel>
	  HAL_Delay(100);
 8001206:	2064      	movs	r0, #100	@ 0x64
 8001208:	f000 fde0 	bl	8001dcc <HAL_Delay>

	  HAL_ADC_Start(&hadc1);
 800120c:	4860      	ldr	r0, [pc, #384]	@ (8001390 <main+0x308>)
 800120e:	f000 fe45 	bl	8001e9c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001212:	f04f 31ff 	mov.w	r1, #4294967295
 8001216:	485e      	ldr	r0, [pc, #376]	@ (8001390 <main+0x308>)
 8001218:	f000 ff45 	bl	80020a6 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 800121c:	485c      	ldr	r0, [pc, #368]	@ (8001390 <main+0x308>)
 800121e:	f000 ffcd 	bl	80021bc <HAL_ADC_GetValue>
 8001222:	4603      	mov	r3, r0
 8001224:	4a61      	ldr	r2, [pc, #388]	@ (80013ac <main+0x324>)
 8001226:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8001228:	4859      	ldr	r0, [pc, #356]	@ (8001390 <main+0x308>)
 800122a:	f000 ff09 	bl	8002040 <HAL_ADC_Stop>

	  voltage = (adc_value / 4095.0) * 3.3;
 800122e:	4b5f      	ldr	r3, [pc, #380]	@ (80013ac <main+0x324>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f986 	bl	8000544 <__aeabi_ui2d>
 8001238:	a34b      	add	r3, pc, #300	@ (adr r3, 8001368 <main+0x2e0>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff fb25 	bl	800088c <__aeabi_ddiv>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	a349      	add	r3, pc, #292	@ (adr r3, 8001370 <main+0x2e8>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff f9f2 	bl	8000638 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fbfe 	bl	8000a5c <__aeabi_d2f>
 8001260:	4603      	mov	r3, r0
 8001262:	4a53      	ldr	r2, [pc, #332]	@ (80013b0 <main+0x328>)
 8001264:	6013      	str	r3, [r2, #0]
	  temperature = voltage * 100.0;
 8001266:	4b52      	ldr	r3, [pc, #328]	@ (80013b0 <main+0x328>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80013b4 <main+0x32c>
 8001270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001274:	4b50      	ldr	r3, [pc, #320]	@ (80013b8 <main+0x330>)
 8001276:	edc3 7a00 	vstr	s15, [r3]

	  Lcd_cursor(&lcd, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	483e      	ldr	r0, [pc, #248]	@ (8001378 <main+0x2f0>)
 8001280:	f7ff fe40 	bl	8000f04 <Lcd_cursor>
	  Lcd_string(&lcd, "Temp Monitor");
 8001284:	494d      	ldr	r1, [pc, #308]	@ (80013bc <main+0x334>)
 8001286:	483c      	ldr	r0, [pc, #240]	@ (8001378 <main+0x2f0>)
 8001288:	f7ff fe1c 	bl	8000ec4 <Lcd_string>
	  Lcd_cursor(&lcd, 1, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2101      	movs	r1, #1
 8001290:	4839      	ldr	r0, [pc, #228]	@ (8001378 <main+0x2f0>)
 8001292:	f7ff fe37 	bl	8000f04 <Lcd_cursor>
	  Lcd_string(&lcd, "Temp: ");
 8001296:	494a      	ldr	r1, [pc, #296]	@ (80013c0 <main+0x338>)
 8001298:	4837      	ldr	r0, [pc, #220]	@ (8001378 <main+0x2f0>)
 800129a:	f7ff fe13 	bl	8000ec4 <Lcd_string>

	  int temp_int = (int)temperature;
 800129e:	4b46      	ldr	r3, [pc, #280]	@ (80013b8 <main+0x330>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a8:	ee17 3a90 	vmov	r3, s15
 80012ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  int temp_frac = (int)((temperature - temp_int) * 100);
 80012ae:	4b42      	ldr	r3, [pc, #264]	@ (80013b8 <main+0x330>)
 80012b0:	ed93 7a00 	vldr	s14, [r3]
 80012b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c2:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80013b4 <main+0x32c>
 80012c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ce:	ee17 3a90 	vmov	r3, s15
 80012d2:	63bb      	str	r3, [r7, #56]	@ 0x38

	  Lcd_int(&lcd, temp_int);
 80012d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80012d6:	4828      	ldr	r0, [pc, #160]	@ (8001378 <main+0x2f0>)
 80012d8:	f7ff fddc 	bl	8000e94 <Lcd_int>
	  Lcd_string(&lcd, ".");
 80012dc:	4939      	ldr	r1, [pc, #228]	@ (80013c4 <main+0x33c>)
 80012de:	4826      	ldr	r0, [pc, #152]	@ (8001378 <main+0x2f0>)
 80012e0:	f7ff fdf0 	bl	8000ec4 <Lcd_string>
	  if (temp_frac < 10)
 80012e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012e6:	2b09      	cmp	r3, #9
 80012e8:	dc03      	bgt.n	80012f2 <main+0x26a>
		  Lcd_string(&lcd, "0");
 80012ea:	4937      	ldr	r1, [pc, #220]	@ (80013c8 <main+0x340>)
 80012ec:	4822      	ldr	r0, [pc, #136]	@ (8001378 <main+0x2f0>)
 80012ee:	f7ff fde9 	bl	8000ec4 <Lcd_string>
	  Lcd_int(&lcd, temp_frac);
 80012f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80012f4:	4820      	ldr	r0, [pc, #128]	@ (8001378 <main+0x2f0>)
 80012f6:	f7ff fdcd 	bl	8000e94 <Lcd_int>
	  Lcd_string(&lcd, " C");
 80012fa:	4934      	ldr	r1, [pc, #208]	@ (80013cc <main+0x344>)
 80012fc:	481e      	ldr	r0, [pc, #120]	@ (8001378 <main+0x2f0>)
 80012fe:	f7ff fde1 	bl	8000ec4 <Lcd_string>

	  if (temperature < temp_low) {
 8001302:	4b25      	ldr	r3, [pc, #148]	@ (8001398 <main+0x310>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130e:	4b2a      	ldr	r3, [pc, #168]	@ (80013b8 <main+0x330>)
 8001310:	edd3 7a00 	vldr	s15, [r3]
 8001314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	dd5e      	ble.n	80013dc <main+0x354>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001324:	482a      	ldr	r0, [pc, #168]	@ (80013d0 <main+0x348>)
 8001326:	f001 fc17 	bl	8002b58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001330:	4828      	ldr	r0, [pc, #160]	@ (80013d4 <main+0x34c>)
 8001332:	f001 fc11 	bl	8002b58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800133c:	4826      	ldr	r0, [pc, #152]	@ (80013d8 <main+0x350>)
 800133e:	f001 fc0b 	bl	8002b58 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1250);
 8001342:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <main+0x300>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800134a:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001352:	4820      	ldr	r0, [pc, #128]	@ (80013d4 <main+0x34c>)
 8001354:	f001 fc00 	bl	8002b58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800135e:	4812      	ldr	r0, [pc, #72]	@ (80013a8 <main+0x320>)
 8001360:	f001 fbfa 	bl	8002b58 <HAL_GPIO_WritePin>
 8001364:	e73c      	b.n	80011e0 <main+0x158>
 8001366:	bf00      	nop
 8001368:	00000000 	.word	0x00000000
 800136c:	40affe00 	.word	0x40affe00
 8001370:	66666666 	.word	0x66666666
 8001374:	400a6666 	.word	0x400a6666
 8001378:	20000134 	.word	0x20000134
 800137c:	40020000 	.word	0x40020000
 8001380:	20000014 	.word	0x20000014
 8001384:	20000004 	.word	0x20000004
 8001388:	200000dc 	.word	0x200000dc
 800138c:	08004d08 	.word	0x08004d08
 8001390:	20000094 	.word	0x20000094
 8001394:	20000128 	.word	0x20000128
 8001398:	20000000 	.word	0x20000000
 800139c:	20000002 	.word	0x20000002
 80013a0:	08004d18 	.word	0x08004d18
 80013a4:	08004d20 	.word	0x08004d20
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	20000124 	.word	0x20000124
 80013b0:	2000012c 	.word	0x2000012c
 80013b4:	42c80000 	.word	0x42c80000
 80013b8:	20000130 	.word	0x20000130
 80013bc:	08004d28 	.word	0x08004d28
 80013c0:	08004d38 	.word	0x08004d38
 80013c4:	08004d40 	.word	0x08004d40
 80013c8:	08004d44 	.word	0x08004d44
 80013cc:	08004d48 	.word	0x08004d48
 80013d0:	40021800 	.word	0x40021800
 80013d4:	40021400 	.word	0x40021400
 80013d8:	40021000 	.word	0x40021000
	  } else if (temperature <= temp_high) {
 80013dc:	4b31      	ldr	r3, [pc, #196]	@ (80014a4 <main+0x41c>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e8:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <main+0x420>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	db23      	blt.n	8001440 <main+0x3b8>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013fe:	482b      	ldr	r0, [pc, #172]	@ (80014ac <main+0x424>)
 8001400:	f001 fbaa 	bl	8002b58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800140a:	4829      	ldr	r0, [pc, #164]	@ (80014b0 <main+0x428>)
 800140c:	f001 fba4 	bl	8002b58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001416:	4827      	ldr	r0, [pc, #156]	@ (80014b4 <main+0x42c>)
 8001418:	f001 fb9e 	bl	8002b58 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 750);
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <main+0x430>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001424:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800142c:	4820      	ldr	r0, [pc, #128]	@ (80014b0 <main+0x428>)
 800142e:	f001 fb93 	bl	8002b58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001438:	4820      	ldr	r0, [pc, #128]	@ (80014bc <main+0x434>)
 800143a:	f001 fb8d 	bl	8002b58 <HAL_GPIO_WritePin>
 800143e:	e6cf      	b.n	80011e0 <main+0x158>
	  } else {
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001446:	4819      	ldr	r0, [pc, #100]	@ (80014ac <main+0x424>)
 8001448:	f001 fb86 	bl	8002b58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001452:	4817      	ldr	r0, [pc, #92]	@ (80014b0 <main+0x428>)
 8001454:	f001 fb80 	bl	8002b58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800145e:	4815      	ldr	r0, [pc, #84]	@ (80014b4 <main+0x42c>)
 8001460:	f001 fb7a 	bl	8002b58 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 250);
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <main+0x430>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	22fa      	movs	r2, #250	@ 0xfa
 800146a:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001472:	480f      	ldr	r0, [pc, #60]	@ (80014b0 <main+0x428>)
 8001474:	f001 fb70 	bl	8002b58 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800147e:	480f      	ldr	r0, [pc, #60]	@ (80014bc <main+0x434>)
 8001480:	f001 fb6a 	bl	8002b58 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001484:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001488:	f000 fca0 	bl	8001dcc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001492:	480a      	ldr	r0, [pc, #40]	@ (80014bc <main+0x434>)
 8001494:	f001 fb60 	bl	8002b58 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001498:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800149c:	f000 fc96 	bl	8001dcc <HAL_Delay>
  while (1) {
 80014a0:	e69e      	b.n	80011e0 <main+0x158>
 80014a2:	bf00      	nop
 80014a4:	20000002 	.word	0x20000002
 80014a8:	20000130 	.word	0x20000130
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40021400 	.word	0x40021400
 80014b4:	40021000 	.word	0x40021000
 80014b8:	200000dc 	.word	0x200000dc
 80014bc:	40020c00 	.word	0x40020c00

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	@ 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	2234      	movs	r2, #52	@ 0x34
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 ff8c 	bl	80043ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	4b2c      	ldr	r3, [pc, #176]	@ (800159c <SystemClock_Config+0xdc>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	4a2b      	ldr	r2, [pc, #172]	@ (800159c <SystemClock_Config+0xdc>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f4:	4b29      	ldr	r3, [pc, #164]	@ (800159c <SystemClock_Config+0xdc>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001500:	2300      	movs	r3, #0
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	4b26      	ldr	r3, [pc, #152]	@ (80015a0 <SystemClock_Config+0xe0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a25      	ldr	r2, [pc, #148]	@ (80015a0 <SystemClock_Config+0xe0>)
 800150a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <SystemClock_Config+0xe0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151c:	2302      	movs	r3, #2
 800151e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001524:	2310      	movs	r3, #16
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001528:	2302      	movs	r3, #2
 800152a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152c:	2300      	movs	r3, #0
 800152e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001530:	2308      	movs	r3, #8
 8001532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001534:	23b4      	movs	r3, #180	@ 0xb4
 8001536:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001538:	2302      	movs	r3, #2
 800153a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800153c:	2302      	movs	r3, #2
 800153e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001540:	2302      	movs	r3, #2
 8001542:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fdff 	bl	800314c <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001554:	f000 fa3c 	bl	80019d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001558:	f001 fb18 	bl	8002b8c <HAL_PWREx_EnableOverDrive>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001562:	f000 fa35 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
 8001568:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2302      	movs	r3, #2
 800156c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001572:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001576:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001578:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800157c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	2105      	movs	r1, #5
 8001584:	4618      	mov	r0, r3
 8001586:	f001 fb51 	bl	8002c2c <HAL_RCC_ClockConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001590:	f000 fa1e 	bl	80019d0 <Error_Handler>
  }
}
 8001594:	bf00      	nop
 8001596:	3750      	adds	r7, #80	@ 0x50
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	40007000 	.word	0x40007000

080015a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015aa:	463b      	mov	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015b6:	4b21      	ldr	r3, [pc, #132]	@ (800163c <MX_ADC1_Init+0x98>)
 80015b8:	4a21      	ldr	r2, [pc, #132]	@ (8001640 <MX_ADC1_Init+0x9c>)
 80015ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015bc:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <MX_ADC1_Init+0x98>)
 80015be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	@ (800163c <MX_ADC1_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <MX_ADC1_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <MX_ADC1_Init+0x98>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d6:	4b19      	ldr	r3, [pc, #100]	@ (800163c <MX_ADC1_Init+0x98>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015de:	4b17      	ldr	r3, [pc, #92]	@ (800163c <MX_ADC1_Init+0x98>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e4:	4b15      	ldr	r3, [pc, #84]	@ (800163c <MX_ADC1_Init+0x98>)
 80015e6:	4a17      	ldr	r2, [pc, #92]	@ (8001644 <MX_ADC1_Init+0xa0>)
 80015e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ea:	4b14      	ldr	r3, [pc, #80]	@ (800163c <MX_ADC1_Init+0x98>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <MX_ADC1_Init+0x98>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <MX_ADC1_Init+0x98>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <MX_ADC1_Init+0x98>)
 8001600:	2201      	movs	r2, #1
 8001602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001604:	480d      	ldr	r0, [pc, #52]	@ (800163c <MX_ADC1_Init+0x98>)
 8001606:	f000 fc05 	bl	8001e14 <HAL_ADC_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001610:	f000 f9de 	bl	80019d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001614:	2303      	movs	r3, #3
 8001616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001618:	2301      	movs	r3, #1
 800161a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_ADC1_Init+0x98>)
 8001626:	f000 fdd7 	bl	80021d8 <HAL_ADC_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001630:	f000 f9ce 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000094 	.word	0x20000094
 8001640:	40012000 	.word	0x40012000
 8001644:	0f000001 	.word	0x0f000001

08001648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08e      	sub	sp, #56	@ 0x38
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	f107 0320 	add.w	r3, r7, #32
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	615a      	str	r2, [r3, #20]
 8001676:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001678:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <MX_TIM3_Init+0xe4>)
 800167a:	4a2d      	ldr	r2, [pc, #180]	@ (8001730 <MX_TIM3_Init+0xe8>)
 800167c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180-1;
 800167e:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <MX_TIM3_Init+0xe4>)
 8001680:	22b3      	movs	r2, #179	@ 0xb3
 8001682:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001684:	4b29      	ldr	r3, [pc, #164]	@ (800172c <MX_TIM3_Init+0xe4>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800168a:	4b28      	ldr	r3, [pc, #160]	@ (800172c <MX_TIM3_Init+0xe4>)
 800168c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001690:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001692:	4b26      	ldr	r3, [pc, #152]	@ (800172c <MX_TIM3_Init+0xe4>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001698:	4b24      	ldr	r3, [pc, #144]	@ (800172c <MX_TIM3_Init+0xe4>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800169e:	4823      	ldr	r0, [pc, #140]	@ (800172c <MX_TIM3_Init+0xe4>)
 80016a0:	f001 fff2 	bl	8003688 <HAL_TIM_Base_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016aa:	f000 f991 	bl	80019d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016b8:	4619      	mov	r1, r3
 80016ba:	481c      	ldr	r0, [pc, #112]	@ (800172c <MX_TIM3_Init+0xe4>)
 80016bc:	f002 fa16 	bl	8003aec <HAL_TIM_ConfigClockSource>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016c6:	f000 f983 	bl	80019d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016ca:	4818      	ldr	r0, [pc, #96]	@ (800172c <MX_TIM3_Init+0xe4>)
 80016cc:	f002 f82b 	bl	8003726 <HAL_TIM_PWM_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016d6:	f000 f97b 	bl	80019d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016e2:	f107 0320 	add.w	r3, r7, #32
 80016e6:	4619      	mov	r1, r3
 80016e8:	4810      	ldr	r0, [pc, #64]	@ (800172c <MX_TIM3_Init+0xe4>)
 80016ea:	f002 fde3 	bl	80042b4 <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016f4:	f000 f96c 	bl	80019d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f8:	2360      	movs	r3, #96	@ 0x60
 80016fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2204      	movs	r2, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4807      	ldr	r0, [pc, #28]	@ (800172c <MX_TIM3_Init+0xe4>)
 8001710:	f002 f92a 	bl	8003968 <HAL_TIM_PWM_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800171a:	f000 f959 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <MX_TIM3_Init+0xe4>)
 8001720:	f000 fa06 	bl	8001b30 <HAL_TIM_MspPostInit>

}
 8001724:	bf00      	nop
 8001726:	3738      	adds	r7, #56	@ 0x38
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200000dc 	.word	0x200000dc
 8001730:	40000400 	.word	0x40000400

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08c      	sub	sp, #48	@ 0x30
 8001738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	4b9a      	ldr	r3, [pc, #616]	@ (80019b8 <MX_GPIO_Init+0x284>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a99      	ldr	r2, [pc, #612]	@ (80019b8 <MX_GPIO_Init+0x284>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b97      	ldr	r3, [pc, #604]	@ (80019b8 <MX_GPIO_Init+0x284>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	4b93      	ldr	r3, [pc, #588]	@ (80019b8 <MX_GPIO_Init+0x284>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a92      	ldr	r2, [pc, #584]	@ (80019b8 <MX_GPIO_Init+0x284>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b90      	ldr	r3, [pc, #576]	@ (80019b8 <MX_GPIO_Init+0x284>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b8c      	ldr	r3, [pc, #560]	@ (80019b8 <MX_GPIO_Init+0x284>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a8b      	ldr	r2, [pc, #556]	@ (80019b8 <MX_GPIO_Init+0x284>)
 800178c:	f043 0320 	orr.w	r3, r3, #32
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b89      	ldr	r3, [pc, #548]	@ (80019b8 <MX_GPIO_Init+0x284>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0320 	and.w	r3, r3, #32
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b85      	ldr	r3, [pc, #532]	@ (80019b8 <MX_GPIO_Init+0x284>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a84      	ldr	r2, [pc, #528]	@ (80019b8 <MX_GPIO_Init+0x284>)
 80017a8:	f043 0310 	orr.w	r3, r3, #16
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b82      	ldr	r3, [pc, #520]	@ (80019b8 <MX_GPIO_Init+0x284>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b7e      	ldr	r3, [pc, #504]	@ (80019b8 <MX_GPIO_Init+0x284>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a7d      	ldr	r2, [pc, #500]	@ (80019b8 <MX_GPIO_Init+0x284>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b7b      	ldr	r3, [pc, #492]	@ (80019b8 <MX_GPIO_Init+0x284>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b77      	ldr	r3, [pc, #476]	@ (80019b8 <MX_GPIO_Init+0x284>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a76      	ldr	r2, [pc, #472]	@ (80019b8 <MX_GPIO_Init+0x284>)
 80017e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b74      	ldr	r3, [pc, #464]	@ (80019b8 <MX_GPIO_Init+0x284>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2160      	movs	r1, #96	@ 0x60
 80017f6:	4871      	ldr	r0, [pc, #452]	@ (80019bc <MX_GPIO_Init+0x288>)
 80017f8:	f001 f9ae 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001802:	486f      	ldr	r0, [pc, #444]	@ (80019c0 <MX_GPIO_Init+0x28c>)
 8001804:	f001 f9a8 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 5128 	mov.w	r1, #10752	@ 0x2a00
 800180e:	486d      	ldr	r0, [pc, #436]	@ (80019c4 <MX_GPIO_Init+0x290>)
 8001810:	f001 f9a2 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800181a:	486b      	ldr	r0, [pc, #428]	@ (80019c8 <MX_GPIO_Init+0x294>)
 800181c:	f001 f99c 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001826:	4869      	ldr	r0, [pc, #420]	@ (80019cc <MX_GPIO_Init+0x298>)
 8001828:	f001 f996 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800182c:	2360      	movs	r3, #96	@ 0x60
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	4619      	mov	r1, r3
 8001842:	485e      	ldr	r0, [pc, #376]	@ (80019bc <MX_GPIO_Init+0x288>)
 8001844:	f000 ffdc 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001848:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	4857      	ldr	r0, [pc, #348]	@ (80019c0 <MX_GPIO_Init+0x28c>)
 8001862:	f000 ffcd 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001866:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	4851      	ldr	r0, [pc, #324]	@ (80019c4 <MX_GPIO_Init+0x290>)
 8001880:	f000 ffbe 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001884:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188e:	2301      	movs	r3, #1
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	484b      	ldr	r0, [pc, #300]	@ (80019c8 <MX_GPIO_Init+0x294>)
 800189a:	f000 ffb1 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800189e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	4844      	ldr	r0, [pc, #272]	@ (80019c8 <MX_GPIO_Init+0x294>)
 80018b8:	f000 ffa2 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	483d      	ldr	r0, [pc, #244]	@ (80019cc <MX_GPIO_Init+0x298>)
 80018d6:	f000 ff93 	bl	8002800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	2160      	movs	r1, #96	@ 0x60
 80018de:	4837      	ldr	r0, [pc, #220]	@ (80019bc <MX_GPIO_Init+0x288>)
 80018e0:	f001 f93a 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80018ea:	4835      	ldr	r0, [pc, #212]	@ (80019c0 <MX_GPIO_Init+0x28c>)
 80018ec:	f001 f934 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 5128 	mov.w	r1, #10752	@ 0x2a00
 80018f6:	4833      	ldr	r0, [pc, #204]	@ (80019c4 <MX_GPIO_Init+0x290>)
 80018f8:	f001 f92e 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001902:	4832      	ldr	r0, [pc, #200]	@ (80019cc <MX_GPIO_Init+0x298>)
 8001904:	f001 f928 	bl	8002b58 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001908:	2360      	movs	r3, #96	@ 0x60
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	4827      	ldr	r0, [pc, #156]	@ (80019bc <MX_GPIO_Init+0x288>)
 8001920:	f000 ff6e 	bl	8002800 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001924:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	4823      	ldr	r0, [pc, #140]	@ (80019c0 <MX_GPIO_Init+0x28c>)
 8001932:	f000 ff65 	bl	8002800 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001936:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800193a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4619      	mov	r1, r3
 8001942:	4822      	ldr	r0, [pc, #136]	@ (80019cc <MX_GPIO_Init+0x298>)
 8001944:	f000 ff5c 	bl	8002800 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001948:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 800194c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	481b      	ldr	r0, [pc, #108]	@ (80019c4 <MX_GPIO_Init+0x290>)
 8001956:	f000 ff53 	bl	8002800 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800195a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001964:	2301      	movs	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4816      	ldr	r0, [pc, #88]	@ (80019c8 <MX_GPIO_Init+0x294>)
 8001970:	f000 ff46 	bl	8002800 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	480c      	ldr	r0, [pc, #48]	@ (80019c0 <MX_GPIO_Init+0x28c>)
 800198e:	f000 ff37 	bl	8002800 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	4807      	ldr	r0, [pc, #28]	@ (80019c8 <MX_GPIO_Init+0x294>)
 80019ac:	f000 ff28 	bl	8002800 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 80019b0:	bf00      	nop
 80019b2:	3730      	adds	r7, #48	@ 0x30
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40021400 	.word	0x40021400
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40021800 	.word	0x40021800

080019d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
}
 80019d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <Error_Handler+0x8>

080019dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <HAL_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001a28 <HAL_MspInit+0x4c>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <HAL_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <HAL_MspInit+0x4c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a08      	ldr	r2, [pc, #32]	@ (8001a28 <HAL_MspInit+0x4c>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	@ 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a24      	ldr	r2, [pc, #144]	@ (8001adc <HAL_ADC_MspInit+0xb0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d141      	bne.n	8001ad2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <HAL_ADC_MspInit+0xb4>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	4a22      	ldr	r2, [pc, #136]	@ (8001ae0 <HAL_ADC_MspInit+0xb4>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ae0 <HAL_ADC_MspInit+0xb4>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <HAL_ADC_MspInit+0xb4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae0 <HAL_ADC_MspInit+0xb4>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <HAL_ADC_MspInit+0xb4>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <HAL_ADC_MspInit+0xb4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <HAL_ADC_MspInit+0xb4>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <HAL_ADC_MspInit+0xb4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480b      	ldr	r0, [pc, #44]	@ (8001ae4 <HAL_ADC_MspInit+0xb8>)
 8001ab6:	f000 fea3 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001aba:	2308      	movs	r3, #8
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4806      	ldr	r0, [pc, #24]	@ (8001ae8 <HAL_ADC_MspInit+0xbc>)
 8001ace:	f000 fe97 	bl	8002800 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	@ 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40012000 	.word	0x40012000
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020000 	.word	0x40020000

08001aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0b      	ldr	r2, [pc, #44]	@ (8001b28 <HAL_TIM_Base_MspInit+0x3c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10d      	bne.n	8001b1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <HAL_TIM_Base_MspInit+0x40>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <HAL_TIM_Base_MspInit+0x40>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b0e:	4b07      	ldr	r3, [pc, #28]	@ (8001b2c <HAL_TIM_Base_MspInit+0x40>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	40023800 	.word	0x40023800

08001b30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a12      	ldr	r2, [pc, #72]	@ (8001b98 <HAL_TIM_MspPostInit+0x68>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d11d      	bne.n	8001b8e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <HAL_TIM_MspPostInit+0x6c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a10      	ldr	r2, [pc, #64]	@ (8001b9c <HAL_TIM_MspPostInit+0x6c>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_TIM_MspPostInit+0x6c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b6e:	2380      	movs	r3, #128	@ 0x80
 8001b70:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <HAL_TIM_MspPostInit+0x70>)
 8001b8a:	f000 fe39 	bl	8002800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3720      	adds	r7, #32
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40000400 	.word	0x40000400
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <NMI_Handler+0x4>

08001bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 f8c7 	bl	8001d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	@ (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f002 fbe2 	bl	80043fc <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	@ (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20020000 	.word	0x20020000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	2000014c 	.word	0x2000014c
 8001c6c:	200002a0 	.word	0x200002a0

08001c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <SystemInit+0x20>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <SystemInit+0x20>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ccc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c98:	f7ff ffea 	bl	8001c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c9c:	480c      	ldr	r0, [pc, #48]	@ (8001cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c9e:	490d      	ldr	r1, [pc, #52]	@ (8001cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca4:	e002      	b.n	8001cac <LoopCopyDataInit>

08001ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001caa:	3304      	adds	r3, #4

08001cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb0:	d3f9      	bcc.n	8001ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb8:	e001      	b.n	8001cbe <LoopFillZerobss>

08001cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cbc:	3204      	adds	r2, #4

08001cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc0:	d3fb      	bcc.n	8001cba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cc2:	f002 fba1 	bl	8004408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cc6:	f7ff f9df 	bl	8001088 <main>
  bx  lr    
 8001cca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ccc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001cd8:	08004da4 	.word	0x08004da4
  ldr r2, =_sbss
 8001cdc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001ce0:	2000029c 	.word	0x2000029c

08001ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce4:	e7fe      	b.n	8001ce4 <ADC_IRQHandler>
	...

08001ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cec:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <HAL_Init+0x40>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <HAL_Init+0x40>)
 8001cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d28 <HAL_Init+0x40>)
 8001cfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a07      	ldr	r2, [pc, #28]	@ (8001d28 <HAL_Init+0x40>)
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d10:	2003      	movs	r0, #3
 8001d12:	f000 fd41 	bl	8002798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d16:	200f      	movs	r0, #15
 8001d18:	f000 f808 	bl	8001d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d1c:	f7ff fe5e 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023c00 	.word	0x40023c00

08001d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <HAL_InitTick+0x54>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <HAL_InitTick+0x58>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fd4b 	bl	80027e6 <HAL_SYSTICK_Config>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00e      	b.n	8001d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b0f      	cmp	r3, #15
 8001d5e:	d80a      	bhi.n	8001d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d60:	2200      	movs	r2, #0
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f000 fd21 	bl	80027ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d6c:	4a06      	ldr	r2, [pc, #24]	@ (8001d88 <HAL_InitTick+0x5c>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000001c 	.word	0x2000001c
 8001d84:	20000024 	.word	0x20000024
 8001d88:	20000020 	.word	0x20000020

08001d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_IncTick+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000024 	.word	0x20000024
 8001db0:	20000150 	.word	0x20000150

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b03      	ldr	r3, [pc, #12]	@ (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000150 	.word	0x20000150

08001dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff ffee 	bl	8001db4 <HAL_GetTick>
 8001dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d005      	beq.n	8001df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_Delay+0x44>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df2:	bf00      	nop
 8001df4:	f7ff ffde 	bl	8001db4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d8f7      	bhi.n	8001df4 <HAL_Delay+0x28>
  {
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000024 	.word	0x20000024

08001e14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e033      	b.n	8001e92 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fdfa 	bl	8001a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d118      	bne.n	8001e84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e5a:	f023 0302 	bic.w	r3, r3, #2
 8001e5e:	f043 0202 	orr.w	r2, r3, #2
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fae8 	bl	800243c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e82:	e001      	b.n	8001e88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_Start+0x1a>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e0b2      	b.n	800201c <HAL_ADC_Start+0x180>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d018      	beq.n	8001efe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001edc:	4b52      	ldr	r3, [pc, #328]	@ (8002028 <HAL_ADC_Start+0x18c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	@ (800202c <HAL_ADC_Start+0x190>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	0c9a      	lsrs	r2, r3, #18
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ef0:	e002      	b.n	8001ef8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f9      	bne.n	8001ef2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d17a      	bne.n	8002002 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f4a:	d106      	bne.n	8001f5a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f50:	f023 0206 	bic.w	r2, r3, #6
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f58:	e002      	b.n	8001f60 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f68:	4b31      	ldr	r3, [pc, #196]	@ (8002030 <HAL_ADC_Start+0x194>)
 8001f6a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f74:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d12a      	bne.n	8001fd8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a2b      	ldr	r2, [pc, #172]	@ (8002034 <HAL_ADC_Start+0x198>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d015      	beq.n	8001fb8 <HAL_ADC_Start+0x11c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a29      	ldr	r2, [pc, #164]	@ (8002038 <HAL_ADC_Start+0x19c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d105      	bne.n	8001fa2 <HAL_ADC_Start+0x106>
 8001f96:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <HAL_ADC_Start+0x194>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a25      	ldr	r2, [pc, #148]	@ (800203c <HAL_ADC_Start+0x1a0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d136      	bne.n	800201a <HAL_ADC_Start+0x17e>
 8001fac:	4b20      	ldr	r3, [pc, #128]	@ (8002030 <HAL_ADC_Start+0x194>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d130      	bne.n	800201a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d129      	bne.n	800201a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	e020      	b.n	800201a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a15      	ldr	r2, [pc, #84]	@ (8002034 <HAL_ADC_Start+0x198>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d11b      	bne.n	800201a <HAL_ADC_Start+0x17e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d114      	bne.n	800201a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	e00b      	b.n	800201a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f043 0210 	orr.w	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	2000001c 	.word	0x2000001c
 800202c:	431bde83 	.word	0x431bde83
 8002030:	40012300 	.word	0x40012300
 8002034:	40012000 	.word	0x40012000
 8002038:	40012100 	.word	0x40012100
 800203c:	40012200 	.word	0x40012200

08002040 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_ADC_Stop+0x16>
 8002052:	2302      	movs	r3, #2
 8002054:	e021      	b.n	800209a <HAL_ADC_Stop+0x5a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c2:	d113      	bne.n	80020ec <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020d2:	d10b      	bne.n	80020ec <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	f043 0220 	orr.w	r2, r3, #32
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e063      	b.n	80021b4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ec:	f7ff fe62 	bl	8001db4 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020f2:	e021      	b.n	8002138 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d01d      	beq.n	8002138 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <HAL_ADC_PollForConversion+0x6c>
 8002102:	f7ff fe57 	bl	8001db4 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d212      	bcs.n	8002138 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b02      	cmp	r3, #2
 800211e:	d00b      	beq.n	8002138 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e03d      	b.n	80021b4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d1d6      	bne.n	80020f4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f06f 0212 	mvn.w	r2, #18
 800214e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d123      	bne.n	80021b2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800216e:	2b00      	cmp	r3, #0
 8002170:	d11f      	bne.n	80021b2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002178:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800217c:	2b00      	cmp	r3, #0
 800217e:	d006      	beq.n	800218e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800218a:	2b00      	cmp	r3, #0
 800218c:	d111      	bne.n	80021b2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d105      	bne.n	80021b2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1c>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e113      	b.n	800241c <HAL_ADC_ConfigChannel+0x244>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b09      	cmp	r3, #9
 8002202:	d925      	bls.n	8002250 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68d9      	ldr	r1, [r3, #12]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	4613      	mov	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	3b1e      	subs	r3, #30
 800221a:	2207      	movs	r2, #7
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43da      	mvns	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	400a      	ands	r2, r1
 8002228:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68d9      	ldr	r1, [r3, #12]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	4618      	mov	r0, r3
 800223c:	4603      	mov	r3, r0
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4403      	add	r3, r0
 8002242:	3b1e      	subs	r3, #30
 8002244:	409a      	lsls	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	e022      	b.n	8002296 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6919      	ldr	r1, [r3, #16]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	2207      	movs	r2, #7
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	400a      	ands	r2, r1
 8002272:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6919      	ldr	r1, [r3, #16]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4618      	mov	r0, r3
 8002286:	4603      	mov	r3, r0
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4403      	add	r3, r0
 800228c:	409a      	lsls	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b06      	cmp	r3, #6
 800229c:	d824      	bhi.n	80022e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	3b05      	subs	r3, #5
 80022b0:	221f      	movs	r2, #31
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	400a      	ands	r2, r1
 80022be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	4618      	mov	r0, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	3b05      	subs	r3, #5
 80022da:	fa00 f203 	lsl.w	r2, r0, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80022e6:	e04c      	b.n	8002382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d824      	bhi.n	800233a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	3b23      	subs	r3, #35	@ 0x23
 8002302:	221f      	movs	r2, #31
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43da      	mvns	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	400a      	ands	r2, r1
 8002310:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b29b      	uxth	r3, r3
 800231e:	4618      	mov	r0, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	3b23      	subs	r3, #35	@ 0x23
 800232c:	fa00 f203 	lsl.w	r2, r0, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
 8002338:	e023      	b.n	8002382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	3b41      	subs	r3, #65	@ 0x41
 800234c:	221f      	movs	r2, #31
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	400a      	ands	r2, r1
 800235a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	4618      	mov	r0, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	3b41      	subs	r3, #65	@ 0x41
 8002376:	fa00 f203 	lsl.w	r2, r0, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002382:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <HAL_ADC_ConfigChannel+0x250>)
 8002384:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a28      	ldr	r2, [pc, #160]	@ (800242c <HAL_ADC_ConfigChannel+0x254>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d10f      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1d8>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b12      	cmp	r3, #18
 8002396:	d10b      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1d      	ldr	r2, [pc, #116]	@ (800242c <HAL_ADC_ConfigChannel+0x254>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d12b      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x23a>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1c      	ldr	r2, [pc, #112]	@ (8002430 <HAL_ADC_ConfigChannel+0x258>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d003      	beq.n	80023cc <HAL_ADC_ConfigChannel+0x1f4>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b11      	cmp	r3, #17
 80023ca:	d122      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a11      	ldr	r2, [pc, #68]	@ (8002430 <HAL_ADC_ConfigChannel+0x258>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d111      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ee:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_ADC_ConfigChannel+0x25c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a11      	ldr	r2, [pc, #68]	@ (8002438 <HAL_ADC_ConfigChannel+0x260>)
 80023f4:	fba2 2303 	umull	r2, r3, r2, r3
 80023f8:	0c9a      	lsrs	r2, r3, #18
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002404:	e002      	b.n	800240c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3b01      	subs	r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f9      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40012300 	.word	0x40012300
 800242c:	40012000 	.word	0x40012000
 8002430:	10000012 	.word	0x10000012
 8002434:	2000001c 	.word	0x2000001c
 8002438:	431bde83 	.word	0x431bde83

0800243c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002444:	4b79      	ldr	r3, [pc, #484]	@ (800262c <ADC_Init+0x1f0>)
 8002446:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	431a      	orrs	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	021a      	lsls	r2, r3, #8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6899      	ldr	r1, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	4a58      	ldr	r2, [pc, #352]	@ (8002630 <ADC_Init+0x1f4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d022      	beq.n	800251a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6899      	ldr	r1, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e00f      	b.n	800253a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002538:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0202 	bic.w	r2, r2, #2
 8002548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6899      	ldr	r1, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7e1b      	ldrb	r3, [r3, #24]
 8002554:	005a      	lsls	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01b      	beq.n	80025a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002576:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002586:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	3b01      	subs	r3, #1
 8002594:	035a      	lsls	r2, r3, #13
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	e007      	b.n	80025b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	051a      	lsls	r2, r3, #20
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6899      	ldr	r1, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025f2:	025a      	lsls	r2, r3, #9
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6899      	ldr	r1, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	029a      	lsls	r2, r3, #10
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40012300 	.word	0x40012300
 8002630:	0f000001 	.word	0x0f000001

08002634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002644:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800265c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002666:	4a04      	ldr	r2, [pc, #16]	@ (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	60d3      	str	r3, [r2, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002680:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <__NVIC_GetPriorityGrouping+0x18>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	f003 0307 	and.w	r3, r3, #7
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	db0a      	blt.n	80026c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	490c      	ldr	r1, [pc, #48]	@ (80026e4 <__NVIC_SetPriority+0x4c>)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	440b      	add	r3, r1
 80026bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c0:	e00a      	b.n	80026d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4908      	ldr	r1, [pc, #32]	@ (80026e8 <__NVIC_SetPriority+0x50>)
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	3b04      	subs	r3, #4
 80026d0:	0112      	lsls	r2, r2, #4
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	440b      	add	r3, r1
 80026d6:	761a      	strb	r2, [r3, #24]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000e100 	.word	0xe000e100
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	@ 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f1c3 0307 	rsb	r3, r3, #7
 8002706:	2b04      	cmp	r3, #4
 8002708:	bf28      	it	cs
 800270a:	2304      	movcs	r3, #4
 800270c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3304      	adds	r3, #4
 8002712:	2b06      	cmp	r3, #6
 8002714:	d902      	bls.n	800271c <NVIC_EncodePriority+0x30>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3b03      	subs	r3, #3
 800271a:	e000      	b.n	800271e <NVIC_EncodePriority+0x32>
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	f04f 32ff 	mov.w	r2, #4294967295
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	401a      	ands	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002734:	f04f 31ff 	mov.w	r1, #4294967295
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	43d9      	mvns	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	4313      	orrs	r3, r2
         );
}
 8002746:	4618      	mov	r0, r3
 8002748:	3724      	adds	r7, #36	@ 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002764:	d301      	bcc.n	800276a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002766:	2301      	movs	r3, #1
 8002768:	e00f      	b.n	800278a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276a:	4a0a      	ldr	r2, [pc, #40]	@ (8002794 <SysTick_Config+0x40>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002772:	210f      	movs	r1, #15
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	f7ff ff8e 	bl	8002698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800277c:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <SysTick_Config+0x40>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002782:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <SysTick_Config+0x40>)
 8002784:	2207      	movs	r2, #7
 8002786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	e000e010 	.word	0xe000e010

08002798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ff47 	bl	8002634 <__NVIC_SetPriorityGrouping>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c0:	f7ff ff5c 	bl	800267c <__NVIC_GetPriorityGrouping>
 80027c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	6978      	ldr	r0, [r7, #20]
 80027cc:	f7ff ff8e 	bl	80026ec <NVIC_EncodePriority>
 80027d0:	4602      	mov	r2, r0
 80027d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d6:	4611      	mov	r1, r2
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff5d 	bl	8002698 <__NVIC_SetPriority>
}
 80027de:	bf00      	nop
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ffb0 	bl	8002754 <SysTick_Config>
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	@ 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	e165      	b.n	8002ae8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	f040 8154 	bne.w	8002ae2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d005      	beq.n	8002852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284e:	2b02      	cmp	r3, #2
 8002850:	d130      	bne.n	80028b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	2203      	movs	r2, #3
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002888:	2201      	movs	r2, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 0201 	and.w	r2, r3, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d017      	beq.n	80028f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d123      	bne.n	8002944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	08da      	lsrs	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3208      	adds	r2, #8
 8002904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	08da      	lsrs	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3208      	adds	r2, #8
 800293e:	69b9      	ldr	r1, [r7, #24]
 8002940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0203 	and.w	r2, r3, #3
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80ae 	beq.w	8002ae2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b00 <HAL_GPIO_Init+0x300>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	4a5c      	ldr	r2, [pc, #368]	@ (8002b00 <HAL_GPIO_Init+0x300>)
 8002990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002994:	6453      	str	r3, [r2, #68]	@ 0x44
 8002996:	4b5a      	ldr	r3, [pc, #360]	@ (8002b00 <HAL_GPIO_Init+0x300>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a2:	4a58      	ldr	r2, [pc, #352]	@ (8002b04 <HAL_GPIO_Init+0x304>)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002b08 <HAL_GPIO_Init+0x308>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d025      	beq.n	8002a1a <HAL_GPIO_Init+0x21a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4e      	ldr	r2, [pc, #312]	@ (8002b0c <HAL_GPIO_Init+0x30c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01f      	beq.n	8002a16 <HAL_GPIO_Init+0x216>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002b10 <HAL_GPIO_Init+0x310>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d019      	beq.n	8002a12 <HAL_GPIO_Init+0x212>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002b14 <HAL_GPIO_Init+0x314>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0x20e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002b18 <HAL_GPIO_Init+0x318>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <HAL_GPIO_Init+0x20a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4a      	ldr	r2, [pc, #296]	@ (8002b1c <HAL_GPIO_Init+0x31c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <HAL_GPIO_Init+0x206>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a49      	ldr	r2, [pc, #292]	@ (8002b20 <HAL_GPIO_Init+0x320>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_GPIO_Init+0x202>
 80029fe:	2306      	movs	r3, #6
 8002a00:	e00c      	b.n	8002a1c <HAL_GPIO_Init+0x21c>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e00a      	b.n	8002a1c <HAL_GPIO_Init+0x21c>
 8002a06:	2305      	movs	r3, #5
 8002a08:	e008      	b.n	8002a1c <HAL_GPIO_Init+0x21c>
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x21c>
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e004      	b.n	8002a1c <HAL_GPIO_Init+0x21c>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e002      	b.n	8002a1c <HAL_GPIO_Init+0x21c>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_GPIO_Init+0x21c>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	f002 0203 	and.w	r2, r2, #3
 8002a22:	0092      	lsls	r2, r2, #2
 8002a24:	4093      	lsls	r3, r2
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a2c:	4935      	ldr	r1, [pc, #212]	@ (8002b04 <HAL_GPIO_Init+0x304>)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b24 <HAL_GPIO_Init+0x324>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5e:	4a31      	ldr	r2, [pc, #196]	@ (8002b24 <HAL_GPIO_Init+0x324>)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a64:	4b2f      	ldr	r3, [pc, #188]	@ (8002b24 <HAL_GPIO_Init+0x324>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a88:	4a26      	ldr	r2, [pc, #152]	@ (8002b24 <HAL_GPIO_Init+0x324>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a8e:	4b25      	ldr	r3, [pc, #148]	@ (8002b24 <HAL_GPIO_Init+0x324>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b24 <HAL_GPIO_Init+0x324>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <HAL_GPIO_Init+0x324>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002adc:	4a11      	ldr	r2, [pc, #68]	@ (8002b24 <HAL_GPIO_Init+0x324>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	f67f ae96 	bls.w	800281c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3724      	adds	r7, #36	@ 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40013800 	.word	0x40013800
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	40020400 	.word	0x40020400
 8002b10:	40020800 	.word	0x40020800
 8002b14:	40020c00 	.word	0x40020c00
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40021400 	.word	0x40021400
 8002b20:	40021800 	.word	0x40021800
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	887b      	ldrh	r3, [r7, #2]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	e001      	b.n	8002b4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b74:	e003      	b.n	8002b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	041a      	lsls	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	619a      	str	r2, [r3, #24]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	603b      	str	r3, [r7, #0]
 8002b9a:	4b20      	ldr	r3, [pc, #128]	@ (8002c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <HAL_PWREx_EnableOverDrive+0x94>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb8:	f7ff f8fc 	bl	8001db4 <HAL_GetTick>
 8002bbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bbe:	e009      	b.n	8002bd4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bc0:	f7ff f8f8 	bl	8001db4 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bce:	d901      	bls.n	8002bd4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e01f      	b.n	8002c14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bd4:	4b13      	ldr	r3, [pc, #76]	@ (8002c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be0:	d1ee      	bne.n	8002bc0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002be2:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be8:	f7ff f8e4 	bl	8001db4 <HAL_GetTick>
 8002bec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bee:	e009      	b.n	8002c04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bf0:	f7ff f8e0 	bl	8001db4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bfe:	d901      	bls.n	8002c04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e007      	b.n	8002c14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c04:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c10:	d1ee      	bne.n	8002bf0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	420e0040 	.word	0x420e0040
 8002c24:	40007000 	.word	0x40007000
 8002c28:	420e0044 	.word	0x420e0044

08002c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0cc      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c40:	4b68      	ldr	r3, [pc, #416]	@ (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d90c      	bls.n	8002c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4b65      	ldr	r3, [pc, #404]	@ (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b63      	ldr	r3, [pc, #396]	@ (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0b8      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d020      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c80:	4b59      	ldr	r3, [pc, #356]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4a58      	ldr	r2, [pc, #352]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c98:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a52      	ldr	r2, [pc, #328]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca4:	4b50      	ldr	r3, [pc, #320]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	494d      	ldr	r1, [pc, #308]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d044      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b47      	ldr	r3, [pc, #284]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d119      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e07f      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d003      	beq.n	8002cea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cea:	4b3f      	ldr	r3, [pc, #252]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e06f      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e067      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d0a:	4b37      	ldr	r3, [pc, #220]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 0203 	bic.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	4934      	ldr	r1, [pc, #208]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d1c:	f7ff f84a 	bl	8001db4 <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d24:	f7ff f846 	bl	8001db4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e04f      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 020c 	and.w	r2, r3, #12
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d1eb      	bne.n	8002d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b25      	ldr	r3, [pc, #148]	@ (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d20c      	bcs.n	8002d74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b22      	ldr	r3, [pc, #136]	@ (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b20      	ldr	r3, [pc, #128]	@ (8002de4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e032      	b.n	8002dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d80:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4916      	ldr	r1, [pc, #88]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d9e:	4b12      	ldr	r3, [pc, #72]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	490e      	ldr	r1, [pc, #56]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002db2:	f000 f821 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002db6:	4602      	mov	r2, r0
 8002db8:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	490a      	ldr	r1, [pc, #40]	@ (8002dec <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	5ccb      	ldrb	r3, [r1, r3]
 8002dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dca:	4a09      	ldr	r2, [pc, #36]	@ (8002df0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dce:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe ffaa 	bl	8001d2c <HAL_InitTick>

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023c00 	.word	0x40023c00
 8002de8:	40023800 	.word	0x40023800
 8002dec:	08004d50 	.word	0x08004d50
 8002df0:	2000001c 	.word	0x2000001c
 8002df4:	20000020 	.word	0x20000020

08002df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dfc:	b0a6      	sub	sp, #152	@ 0x98
 8002dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e1e:	4bc8      	ldr	r3, [pc, #800]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	f200 817e 	bhi.w	8003128 <HAL_RCC_GetSysClockFreq+0x330>
 8002e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e69 	.word	0x08002e69
 8002e38:	08003129 	.word	0x08003129
 8002e3c:	08003129 	.word	0x08003129
 8002e40:	08003129 	.word	0x08003129
 8002e44:	08002e71 	.word	0x08002e71
 8002e48:	08003129 	.word	0x08003129
 8002e4c:	08003129 	.word	0x08003129
 8002e50:	08003129 	.word	0x08003129
 8002e54:	08002e79 	.word	0x08002e79
 8002e58:	08003129 	.word	0x08003129
 8002e5c:	08003129 	.word	0x08003129
 8002e60:	08003129 	.word	0x08003129
 8002e64:	08002fe3 	.word	0x08002fe3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4bb6      	ldr	r3, [pc, #728]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002e6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e6e:	e15f      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e70:	4bb5      	ldr	r3, [pc, #724]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002e76:	e15b      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e78:	4bb1      	ldr	r3, [pc, #708]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e84:	4bae      	ldr	r3, [pc, #696]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d031      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e90:	4bab      	ldr	r3, [pc, #684]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	099b      	lsrs	r3, r3, #6
 8002e96:	2200      	movs	r2, #0
 8002e98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ea8:	4ba7      	ldr	r3, [pc, #668]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x350>)
 8002eaa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002eae:	462a      	mov	r2, r5
 8002eb0:	fb03 f202 	mul.w	r2, r3, r2
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	4aa2      	ldr	r2, [pc, #648]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	fba1 1202 	umull	r1, r2, r1, r2
 8002ec6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ec8:	460a      	mov	r2, r1
 8002eca:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002ecc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002ece:	4413      	add	r3, r2
 8002ed0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002eda:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002edc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ee0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002ee4:	f7fd fe0a 	bl	8000afc <__aeabi_uldivmod>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4613      	mov	r3, r2
 8002eee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ef2:	e064      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef4:	4b92      	ldr	r3, [pc, #584]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	2200      	movs	r2, #0
 8002efc:	653b      	str	r3, [r7, #80]	@ 0x50
 8002efe:	657a      	str	r2, [r7, #84]	@ 0x54
 8002f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f08:	2300      	movs	r3, #0
 8002f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f0c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002f10:	4622      	mov	r2, r4
 8002f12:	462b      	mov	r3, r5
 8002f14:	f04f 0000 	mov.w	r0, #0
 8002f18:	f04f 0100 	mov.w	r1, #0
 8002f1c:	0159      	lsls	r1, r3, #5
 8002f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f22:	0150      	lsls	r0, r2, #5
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4621      	mov	r1, r4
 8002f2a:	1a51      	subs	r1, r2, r1
 8002f2c:	6139      	str	r1, [r7, #16]
 8002f2e:	4629      	mov	r1, r5
 8002f30:	eb63 0301 	sbc.w	r3, r3, r1
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f42:	4659      	mov	r1, fp
 8002f44:	018b      	lsls	r3, r1, #6
 8002f46:	4651      	mov	r1, sl
 8002f48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f4c:	4651      	mov	r1, sl
 8002f4e:	018a      	lsls	r2, r1, #6
 8002f50:	4651      	mov	r1, sl
 8002f52:	ebb2 0801 	subs.w	r8, r2, r1
 8002f56:	4659      	mov	r1, fp
 8002f58:	eb63 0901 	sbc.w	r9, r3, r1
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f70:	4690      	mov	r8, r2
 8002f72:	4699      	mov	r9, r3
 8002f74:	4623      	mov	r3, r4
 8002f76:	eb18 0303 	adds.w	r3, r8, r3
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	eb49 0303 	adc.w	r3, r9, r3
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f90:	4629      	mov	r1, r5
 8002f92:	028b      	lsls	r3, r1, #10
 8002f94:	4621      	mov	r1, r4
 8002f96:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	028a      	lsls	r2, r1, #10
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002faa:	647a      	str	r2, [r7, #68]	@ 0x44
 8002fac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fb0:	f7fd fda4 	bl	8000afc <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002fbe:	4b60      	ldr	r3, [pc, #384]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	0c1b      	lsrs	r3, r3, #16
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002fd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002fe0:	e0a6      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fe2:	4b57      	ldr	r3, [pc, #348]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fee:	4b54      	ldr	r3, [pc, #336]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d02a      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffa:	4b51      	ldr	r3, [pc, #324]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	2200      	movs	r2, #0
 8003002:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003004:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003008:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800300c:	2100      	movs	r1, #0
 800300e:	4b4e      	ldr	r3, [pc, #312]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x350>)
 8003010:	fb03 f201 	mul.w	r2, r3, r1
 8003014:	2300      	movs	r3, #0
 8003016:	fb00 f303 	mul.w	r3, r0, r3
 800301a:	4413      	add	r3, r2
 800301c:	4a4a      	ldr	r2, [pc, #296]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x350>)
 800301e:	fba0 1202 	umull	r1, r2, r0, r2
 8003022:	677a      	str	r2, [r7, #116]	@ 0x74
 8003024:	460a      	mov	r2, r1
 8003026:	673a      	str	r2, [r7, #112]	@ 0x70
 8003028:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800302a:	4413      	add	r3, r2
 800302c:	677b      	str	r3, [r7, #116]	@ 0x74
 800302e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003032:	2200      	movs	r2, #0
 8003034:	633b      	str	r3, [r7, #48]	@ 0x30
 8003036:	637a      	str	r2, [r7, #52]	@ 0x34
 8003038:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800303c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003040:	f7fd fd5c 	bl	8000afc <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800304e:	e05b      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003050:	4b3b      	ldr	r3, [pc, #236]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x348>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	099b      	lsrs	r3, r3, #6
 8003056:	2200      	movs	r2, #0
 8003058:	62bb      	str	r3, [r7, #40]	@ 0x28
 800305a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003062:	623b      	str	r3, [r7, #32]
 8003064:	2300      	movs	r3, #0
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
 8003068:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800306c:	4642      	mov	r2, r8
 800306e:	464b      	mov	r3, r9
 8003070:	f04f 0000 	mov.w	r0, #0
 8003074:	f04f 0100 	mov.w	r1, #0
 8003078:	0159      	lsls	r1, r3, #5
 800307a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307e:	0150      	lsls	r0, r2, #5
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4641      	mov	r1, r8
 8003086:	ebb2 0a01 	subs.w	sl, r2, r1
 800308a:	4649      	mov	r1, r9
 800308c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800309c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a4:	ebb2 040a 	subs.w	r4, r2, sl
 80030a8:	eb63 050b 	sbc.w	r5, r3, fp
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	00eb      	lsls	r3, r5, #3
 80030b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ba:	00e2      	lsls	r2, r4, #3
 80030bc:	4614      	mov	r4, r2
 80030be:	461d      	mov	r5, r3
 80030c0:	4643      	mov	r3, r8
 80030c2:	18e3      	adds	r3, r4, r3
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	464b      	mov	r3, r9
 80030c8:	eb45 0303 	adc.w	r3, r5, r3
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030da:	4629      	mov	r1, r5
 80030dc:	028b      	lsls	r3, r1, #10
 80030de:	4621      	mov	r1, r4
 80030e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e4:	4621      	mov	r1, r4
 80030e6:	028a      	lsls	r2, r1, #10
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030f0:	2200      	movs	r2, #0
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	61fa      	str	r2, [r7, #28]
 80030f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030fa:	f7fd fcff 	bl	8000afc <__aeabi_uldivmod>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4613      	mov	r3, r2
 8003104:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003108:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x348>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0f1b      	lsrs	r3, r3, #28
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003116:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800311a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800311e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003126:	e003      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003128:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x34c>)
 800312a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800312e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003130:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003134:	4618      	mov	r0, r3
 8003136:	3798      	adds	r7, #152	@ 0x98
 8003138:	46bd      	mov	sp, r7
 800313a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800
 8003144:	00f42400 	.word	0x00f42400
 8003148:	017d7840 	.word	0x017d7840

0800314c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e28d      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8083 	beq.w	8003272 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800316c:	4b94      	ldr	r3, [pc, #592]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	2b04      	cmp	r3, #4
 8003176:	d019      	beq.n	80031ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003178:	4b91      	ldr	r3, [pc, #580]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003180:	2b08      	cmp	r3, #8
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003184:	4b8e      	ldr	r3, [pc, #568]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800318c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003190:	d00c      	beq.n	80031ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003192:	4b8b      	ldr	r3, [pc, #556]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d112      	bne.n	80031c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319e:	4b88      	ldr	r3, [pc, #544]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031aa:	d10b      	bne.n	80031c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	4b84      	ldr	r3, [pc, #528]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d05b      	beq.n	8003270 <HAL_RCC_OscConfig+0x124>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d157      	bne.n	8003270 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e25a      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031cc:	d106      	bne.n	80031dc <HAL_RCC_OscConfig+0x90>
 80031ce:	4b7c      	ldr	r3, [pc, #496]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7b      	ldr	r2, [pc, #492]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e01d      	b.n	8003218 <HAL_RCC_OscConfig+0xcc>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0xb4>
 80031e6:	4b76      	ldr	r3, [pc, #472]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a75      	ldr	r2, [pc, #468]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80031ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b73      	ldr	r3, [pc, #460]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a72      	ldr	r2, [pc, #456]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e00b      	b.n	8003218 <HAL_RCC_OscConfig+0xcc>
 8003200:	4b6f      	ldr	r3, [pc, #444]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6e      	ldr	r2, [pc, #440]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 8003206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b6c      	ldr	r3, [pc, #432]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a6b      	ldr	r2, [pc, #428]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 8003212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d013      	beq.n	8003248 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe fdc8 	bl	8001db4 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003228:	f7fe fdc4 	bl	8001db4 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	@ 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e21f      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	4b61      	ldr	r3, [pc, #388]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0xdc>
 8003246:	e014      	b.n	8003272 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fe fdb4 	bl	8001db4 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003250:	f7fe fdb0 	bl	8001db4 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	@ 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e20b      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003262:	4b57      	ldr	r3, [pc, #348]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x104>
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d06f      	beq.n	800335e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800327e:	4b50      	ldr	r3, [pc, #320]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b00      	cmp	r3, #0
 8003288:	d017      	beq.n	80032ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800328a:	4b4d      	ldr	r3, [pc, #308]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003292:	2b08      	cmp	r3, #8
 8003294:	d105      	bne.n	80032a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003296:	4b4a      	ldr	r3, [pc, #296]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a2:	4b47      	ldr	r3, [pc, #284]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d11c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ae:	4b44      	ldr	r3, [pc, #272]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d116      	bne.n	80032e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ba:	4b41      	ldr	r3, [pc, #260]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <HAL_RCC_OscConfig+0x186>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e1d3      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d2:	4b3b      	ldr	r3, [pc, #236]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4937      	ldr	r1, [pc, #220]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	e03a      	b.n	800335e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d020      	beq.n	8003332 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f0:	4b34      	ldr	r3, [pc, #208]	@ (80033c4 <HAL_RCC_OscConfig+0x278>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7fe fd5d 	bl	8001db4 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fe:	f7fe fd59 	bl	8001db4 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e1b4      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003310:	4b2b      	ldr	r3, [pc, #172]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331c:	4b28      	ldr	r3, [pc, #160]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4925      	ldr	r1, [pc, #148]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 800332c:	4313      	orrs	r3, r2
 800332e:	600b      	str	r3, [r1, #0]
 8003330:	e015      	b.n	800335e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003332:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <HAL_RCC_OscConfig+0x278>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe fd3c 	bl	8001db4 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003340:	f7fe fd38 	bl	8001db4 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e193      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003352:	4b1b      	ldr	r3, [pc, #108]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d036      	beq.n	80033d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d016      	beq.n	80033a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003372:	4b15      	ldr	r3, [pc, #84]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fe fd1c 	bl	8001db4 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003380:	f7fe fd18 	bl	8001db4 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e173      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003392:	4b0b      	ldr	r3, [pc, #44]	@ (80033c0 <HAL_RCC_OscConfig+0x274>)
 8003394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x234>
 800339e:	e01b      	b.n	80033d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a0:	4b09      	ldr	r3, [pc, #36]	@ (80033c8 <HAL_RCC_OscConfig+0x27c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a6:	f7fe fd05 	bl	8001db4 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	e00e      	b.n	80033cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ae:	f7fe fd01 	bl	8001db4 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d907      	bls.n	80033cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e15c      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
 80033c0:	40023800 	.word	0x40023800
 80033c4:	42470000 	.word	0x42470000
 80033c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033cc:	4b8a      	ldr	r3, [pc, #552]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 80033ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1ea      	bne.n	80033ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 8097 	beq.w	8003514 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ea:	4b83      	ldr	r3, [pc, #524]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10f      	bne.n	8003416 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	4b7f      	ldr	r3, [pc, #508]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	4a7e      	ldr	r2, [pc, #504]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 8003400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003404:	6413      	str	r3, [r2, #64]	@ 0x40
 8003406:	4b7c      	ldr	r3, [pc, #496]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003412:	2301      	movs	r3, #1
 8003414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003416:	4b79      	ldr	r3, [pc, #484]	@ (80035fc <HAL_RCC_OscConfig+0x4b0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d118      	bne.n	8003454 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003422:	4b76      	ldr	r3, [pc, #472]	@ (80035fc <HAL_RCC_OscConfig+0x4b0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a75      	ldr	r2, [pc, #468]	@ (80035fc <HAL_RCC_OscConfig+0x4b0>)
 8003428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800342c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342e:	f7fe fcc1 	bl	8001db4 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003436:	f7fe fcbd 	bl	8001db4 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e118      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003448:	4b6c      	ldr	r3, [pc, #432]	@ (80035fc <HAL_RCC_OscConfig+0x4b0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d106      	bne.n	800346a <HAL_RCC_OscConfig+0x31e>
 800345c:	4b66      	ldr	r3, [pc, #408]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003460:	4a65      	ldr	r2, [pc, #404]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6713      	str	r3, [r2, #112]	@ 0x70
 8003468:	e01c      	b.n	80034a4 <HAL_RCC_OscConfig+0x358>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b05      	cmp	r3, #5
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0x340>
 8003472:	4b61      	ldr	r3, [pc, #388]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003476:	4a60      	ldr	r2, [pc, #384]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	f043 0304 	orr.w	r3, r3, #4
 800347c:	6713      	str	r3, [r2, #112]	@ 0x70
 800347e:	4b5e      	ldr	r3, [pc, #376]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003482:	4a5d      	ldr	r2, [pc, #372]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	6713      	str	r3, [r2, #112]	@ 0x70
 800348a:	e00b      	b.n	80034a4 <HAL_RCC_OscConfig+0x358>
 800348c:	4b5a      	ldr	r3, [pc, #360]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003490:	4a59      	ldr	r2, [pc, #356]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	6713      	str	r3, [r2, #112]	@ 0x70
 8003498:	4b57      	ldr	r3, [pc, #348]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349c:	4a56      	ldr	r2, [pc, #344]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	f023 0304 	bic.w	r3, r3, #4
 80034a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d015      	beq.n	80034d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ac:	f7fe fc82 	bl	8001db4 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b4:	f7fe fc7e 	bl	8001db4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e0d7      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ca:	4b4b      	ldr	r3, [pc, #300]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0ee      	beq.n	80034b4 <HAL_RCC_OscConfig+0x368>
 80034d6:	e014      	b.n	8003502 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d8:	f7fe fc6c 	bl	8001db4 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e0:	f7fe fc68 	bl	8001db4 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e0c1      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f6:	4b40      	ldr	r3, [pc, #256]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1ee      	bne.n	80034e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d105      	bne.n	8003514 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003508:	4b3b      	ldr	r3, [pc, #236]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	4a3a      	ldr	r2, [pc, #232]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 800350e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80ad 	beq.w	8003678 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800351e:	4b36      	ldr	r3, [pc, #216]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b08      	cmp	r3, #8
 8003528:	d060      	beq.n	80035ec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d145      	bne.n	80035be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	4b33      	ldr	r3, [pc, #204]	@ (8003600 <HAL_RCC_OscConfig+0x4b4>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe fc3c 	bl	8001db4 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003540:	f7fe fc38 	bl	8001db4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e093      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003552:	4b29      	ldr	r3, [pc, #164]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69da      	ldr	r2, [r3, #28]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	019b      	lsls	r3, r3, #6
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	3b01      	subs	r3, #1
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003580:	061b      	lsls	r3, r3, #24
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003588:	071b      	lsls	r3, r3, #28
 800358a:	491b      	ldr	r1, [pc, #108]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003590:	4b1b      	ldr	r3, [pc, #108]	@ (8003600 <HAL_RCC_OscConfig+0x4b4>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7fe fc0d 	bl	8001db4 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359e:	f7fe fc09 	bl	8001db4 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e064      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b0:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x452>
 80035bc:	e05c      	b.n	8003678 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	4b10      	ldr	r3, [pc, #64]	@ (8003600 <HAL_RCC_OscConfig+0x4b4>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe fbf6 	bl	8001db4 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fe fbf2 	bl	8001db4 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e04d      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <HAL_RCC_OscConfig+0x4ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x480>
 80035ea:	e045      	b.n	8003678 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e040      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40007000 	.word	0x40007000
 8003600:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003604:	4b1f      	ldr	r3, [pc, #124]	@ (8003684 <HAL_RCC_OscConfig+0x538>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d030      	beq.n	8003674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d129      	bne.n	8003674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d122      	bne.n	8003674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003634:	4013      	ands	r3, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800363a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800363c:	4293      	cmp	r3, r2
 800363e:	d119      	bne.n	8003674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364a:	085b      	lsrs	r3, r3, #1
 800364c:	3b01      	subs	r3, #1
 800364e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d10f      	bne.n	8003674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d107      	bne.n	8003674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023800 	.word	0x40023800

08003688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e041      	b.n	800371e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fe fa1c 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f000 fad8 	bl	8003c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e041      	b.n	80037bc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d106      	bne.n	8003752 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f839 	bl	80037c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f000 fa89 	bl	8003c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_TIM_PWM_Start+0x24>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e022      	b.n	8003842 <HAL_TIM_PWM_Start+0x6a>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d109      	bne.n	8003816 <HAL_TIM_PWM_Start+0x3e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e015      	b.n	8003842 <HAL_TIM_PWM_Start+0x6a>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d109      	bne.n	8003830 <HAL_TIM_PWM_Start+0x58>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e008      	b.n	8003842 <HAL_TIM_PWM_Start+0x6a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e07c      	b.n	8003944 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <HAL_TIM_PWM_Start+0x82>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003858:	e013      	b.n	8003882 <HAL_TIM_PWM_Start+0xaa>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d104      	bne.n	800386a <HAL_TIM_PWM_Start+0x92>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003868:	e00b      	b.n	8003882 <HAL_TIM_PWM_Start+0xaa>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d104      	bne.n	800387a <HAL_TIM_PWM_Start+0xa2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003878:	e003      	b.n	8003882 <HAL_TIM_PWM_Start+0xaa>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2201      	movs	r2, #1
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fcec 	bl	8004268 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2d      	ldr	r2, [pc, #180]	@ (800394c <HAL_TIM_PWM_Start+0x174>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_TIM_PWM_Start+0xcc>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2c      	ldr	r2, [pc, #176]	@ (8003950 <HAL_TIM_PWM_Start+0x178>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d101      	bne.n	80038a8 <HAL_TIM_PWM_Start+0xd0>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_TIM_PWM_Start+0xd2>
 80038a8:	2300      	movs	r3, #0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a22      	ldr	r2, [pc, #136]	@ (800394c <HAL_TIM_PWM_Start+0x174>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <HAL_TIM_PWM_Start+0x136>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d0:	d01d      	beq.n	800390e <HAL_TIM_PWM_Start+0x136>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003954 <HAL_TIM_PWM_Start+0x17c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_TIM_PWM_Start+0x136>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003958 <HAL_TIM_PWM_Start+0x180>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_TIM_PWM_Start+0x136>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <HAL_TIM_PWM_Start+0x184>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_TIM_PWM_Start+0x136>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a16      	ldr	r2, [pc, #88]	@ (8003950 <HAL_TIM_PWM_Start+0x178>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_TIM_PWM_Start+0x136>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a18      	ldr	r2, [pc, #96]	@ (8003960 <HAL_TIM_PWM_Start+0x188>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_TIM_PWM_Start+0x136>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a16      	ldr	r2, [pc, #88]	@ (8003964 <HAL_TIM_PWM_Start+0x18c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d111      	bne.n	8003932 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b06      	cmp	r3, #6
 800391e:	d010      	beq.n	8003942 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003930:	e007      	b.n	8003942 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0201 	orr.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40010000 	.word	0x40010000
 8003950:	40010400 	.word	0x40010400
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800
 800395c:	40000c00 	.word	0x40000c00
 8003960:	40014000 	.word	0x40014000
 8003964:	40001800 	.word	0x40001800

08003968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003982:	2302      	movs	r3, #2
 8003984:	e0ae      	b.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b0c      	cmp	r3, #12
 8003992:	f200 809f 	bhi.w	8003ad4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003996:	a201      	add	r2, pc, #4	@ (adr r2, 800399c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039d1 	.word	0x080039d1
 80039a0:	08003ad5 	.word	0x08003ad5
 80039a4:	08003ad5 	.word	0x08003ad5
 80039a8:	08003ad5 	.word	0x08003ad5
 80039ac:	08003a11 	.word	0x08003a11
 80039b0:	08003ad5 	.word	0x08003ad5
 80039b4:	08003ad5 	.word	0x08003ad5
 80039b8:	08003ad5 	.word	0x08003ad5
 80039bc:	08003a53 	.word	0x08003a53
 80039c0:	08003ad5 	.word	0x08003ad5
 80039c4:	08003ad5 	.word	0x08003ad5
 80039c8:	08003ad5 	.word	0x08003ad5
 80039cc:	08003a93 	.word	0x08003a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f9fc 	bl	8003dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0208 	orr.w	r2, r2, #8
 80039ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6999      	ldr	r1, [r3, #24]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	619a      	str	r2, [r3, #24]
      break;
 8003a0e:	e064      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fa4c 	bl	8003eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6999      	ldr	r1, [r3, #24]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	021a      	lsls	r2, r3, #8
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	619a      	str	r2, [r3, #24]
      break;
 8003a50:	e043      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 faa1 	bl	8003fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0208 	orr.w	r2, r2, #8
 8003a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0204 	bic.w	r2, r2, #4
 8003a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69d9      	ldr	r1, [r3, #28]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	61da      	str	r2, [r3, #28]
      break;
 8003a90:	e023      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 faf5 	bl	8004088 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69d9      	ldr	r1, [r3, #28]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	021a      	lsls	r2, r3, #8
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	61da      	str	r2, [r3, #28]
      break;
 8003ad2:	e002      	b.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIM_ConfigClockSource+0x1c>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e0b4      	b.n	8003c72 <HAL_TIM_ConfigClockSource+0x186>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b40:	d03e      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0xd4>
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b46:	f200 8087 	bhi.w	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4e:	f000 8086 	beq.w	8003c5e <HAL_TIM_ConfigClockSource+0x172>
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b56:	d87f      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b70      	cmp	r3, #112	@ 0x70
 8003b5a:	d01a      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0xa6>
 8003b5c:	2b70      	cmp	r3, #112	@ 0x70
 8003b5e:	d87b      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b60      	cmp	r3, #96	@ 0x60
 8003b62:	d050      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0x11a>
 8003b64:	2b60      	cmp	r3, #96	@ 0x60
 8003b66:	d877      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b50      	cmp	r3, #80	@ 0x50
 8003b6a:	d03c      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b6c:	2b50      	cmp	r3, #80	@ 0x50
 8003b6e:	d873      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b40      	cmp	r3, #64	@ 0x40
 8003b72:	d058      	beq.n	8003c26 <HAL_TIM_ConfigClockSource+0x13a>
 8003b74:	2b40      	cmp	r3, #64	@ 0x40
 8003b76:	d86f      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b30      	cmp	r3, #48	@ 0x30
 8003b7a:	d064      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b7c:	2b30      	cmp	r3, #48	@ 0x30
 8003b7e:	d86b      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d060      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d867      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05c      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d05a      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0x15a>
 8003b90:	e062      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ba2:	f000 fb41 	bl	8004228 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	609a      	str	r2, [r3, #8]
      break;
 8003bbe:	e04f      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bd0:	f000 fb2a 	bl	8004228 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003be2:	609a      	str	r2, [r3, #8]
      break;
 8003be4:	e03c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f000 fa9e 	bl	8004134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2150      	movs	r1, #80	@ 0x50
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 faf7 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003c04:	e02c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c12:	461a      	mov	r2, r3
 8003c14:	f000 fabd 	bl	8004192 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2160      	movs	r1, #96	@ 0x60
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fae7 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003c24:	e01c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c32:	461a      	mov	r2, r3
 8003c34:	f000 fa7e 	bl	8004134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2140      	movs	r1, #64	@ 0x40
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fad7 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003c44:	e00c      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f000 face 	bl	80041f2 <TIM_ITRx_SetConfig>
      break;
 8003c56:	e003      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5c:	e000      	b.n	8003c60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a46      	ldr	r2, [pc, #280]	@ (8003da8 <TIM_Base_SetConfig+0x12c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <TIM_Base_SetConfig+0x40>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9a:	d00f      	beq.n	8003cbc <TIM_Base_SetConfig+0x40>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a43      	ldr	r2, [pc, #268]	@ (8003dac <TIM_Base_SetConfig+0x130>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00b      	beq.n	8003cbc <TIM_Base_SetConfig+0x40>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a42      	ldr	r2, [pc, #264]	@ (8003db0 <TIM_Base_SetConfig+0x134>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d007      	beq.n	8003cbc <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a41      	ldr	r2, [pc, #260]	@ (8003db4 <TIM_Base_SetConfig+0x138>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <TIM_Base_SetConfig+0x40>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a40      	ldr	r2, [pc, #256]	@ (8003db8 <TIM_Base_SetConfig+0x13c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d108      	bne.n	8003cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a35      	ldr	r2, [pc, #212]	@ (8003da8 <TIM_Base_SetConfig+0x12c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d02b      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cdc:	d027      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a32      	ldr	r2, [pc, #200]	@ (8003dac <TIM_Base_SetConfig+0x130>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d023      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a31      	ldr	r2, [pc, #196]	@ (8003db0 <TIM_Base_SetConfig+0x134>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01f      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a30      	ldr	r2, [pc, #192]	@ (8003db4 <TIM_Base_SetConfig+0x138>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01b      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a2f      	ldr	r2, [pc, #188]	@ (8003db8 <TIM_Base_SetConfig+0x13c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d017      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a2e      	ldr	r2, [pc, #184]	@ (8003dbc <TIM_Base_SetConfig+0x140>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a2d      	ldr	r2, [pc, #180]	@ (8003dc0 <TIM_Base_SetConfig+0x144>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00f      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc4 <TIM_Base_SetConfig+0x148>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00b      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc8 <TIM_Base_SetConfig+0x14c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a2a      	ldr	r2, [pc, #168]	@ (8003dcc <TIM_Base_SetConfig+0x150>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a29      	ldr	r2, [pc, #164]	@ (8003dd0 <TIM_Base_SetConfig+0x154>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d108      	bne.n	8003d40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a10      	ldr	r2, [pc, #64]	@ (8003da8 <TIM_Base_SetConfig+0x12c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_Base_SetConfig+0xf8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a12      	ldr	r2, [pc, #72]	@ (8003db8 <TIM_Base_SetConfig+0x13c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d103      	bne.n	8003d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d105      	bne.n	8003d9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f023 0201 	bic.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	611a      	str	r2, [r3, #16]
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800
 8003db4:	40000c00 	.word	0x40000c00
 8003db8:	40010400 	.word	0x40010400
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	40014400 	.word	0x40014400
 8003dc4:	40014800 	.word	0x40014800
 8003dc8:	40001800 	.word	0x40001800
 8003dcc:	40001c00 	.word	0x40001c00
 8003dd0:	40002000 	.word	0x40002000

08003dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f023 0201 	bic.w	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f023 0302 	bic.w	r3, r3, #2
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a20      	ldr	r2, [pc, #128]	@ (8003eac <TIM_OC1_SetConfig+0xd8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_OC1_SetConfig+0x64>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb0 <TIM_OC1_SetConfig+0xdc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d10c      	bne.n	8003e52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 0308 	bic.w	r3, r3, #8
 8003e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a15      	ldr	r2, [pc, #84]	@ (8003eac <TIM_OC1_SetConfig+0xd8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d003      	beq.n	8003e62 <TIM_OC1_SetConfig+0x8e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a14      	ldr	r2, [pc, #80]	@ (8003eb0 <TIM_OC1_SetConfig+0xdc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d111      	bne.n	8003e86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	621a      	str	r2, [r3, #32]
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40010400 	.word	0x40010400

08003eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f023 0210 	bic.w	r2, r3, #16
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f023 0320 	bic.w	r3, r3, #32
 8003efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a22      	ldr	r2, [pc, #136]	@ (8003f98 <TIM_OC2_SetConfig+0xe4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_OC2_SetConfig+0x68>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a21      	ldr	r2, [pc, #132]	@ (8003f9c <TIM_OC2_SetConfig+0xe8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d10d      	bne.n	8003f38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a17      	ldr	r2, [pc, #92]	@ (8003f98 <TIM_OC2_SetConfig+0xe4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <TIM_OC2_SetConfig+0x94>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a16      	ldr	r2, [pc, #88]	@ (8003f9c <TIM_OC2_SetConfig+0xe8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d113      	bne.n	8003f70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40010000 	.word	0x40010000
 8003f9c:	40010400 	.word	0x40010400

08003fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0303 	bic.w	r3, r3, #3
 8003fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a21      	ldr	r2, [pc, #132]	@ (8004080 <TIM_OC3_SetConfig+0xe0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d003      	beq.n	8004006 <TIM_OC3_SetConfig+0x66>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a20      	ldr	r2, [pc, #128]	@ (8004084 <TIM_OC3_SetConfig+0xe4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10d      	bne.n	8004022 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800400c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a16      	ldr	r2, [pc, #88]	@ (8004080 <TIM_OC3_SetConfig+0xe0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_OC3_SetConfig+0x92>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a15      	ldr	r2, [pc, #84]	@ (8004084 <TIM_OC3_SetConfig+0xe4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d113      	bne.n	800405a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	621a      	str	r2, [r3, #32]
}
 8004074:	bf00      	nop
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40010000 	.word	0x40010000
 8004084:	40010400 	.word	0x40010400

08004088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	031b      	lsls	r3, r3, #12
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a12      	ldr	r2, [pc, #72]	@ (800412c <TIM_OC4_SetConfig+0xa4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <TIM_OC4_SetConfig+0x68>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a11      	ldr	r2, [pc, #68]	@ (8004130 <TIM_OC4_SetConfig+0xa8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d109      	bne.n	8004104 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	019b      	lsls	r3, r3, #6
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40010000 	.word	0x40010000
 8004130:	40010400 	.word	0x40010400

08004134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f023 0201 	bic.w	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800415e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 030a 	bic.w	r3, r3, #10
 8004170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	621a      	str	r2, [r3, #32]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004192:	b480      	push	{r7}
 8004194:	b087      	sub	sp, #28
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f023 0210 	bic.w	r2, r3, #16
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	031b      	lsls	r3, r3, #12
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	f043 0307 	orr.w	r3, r3, #7
 8004214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	021a      	lsls	r2, r3, #8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	431a      	orrs	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4313      	orrs	r3, r2
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	609a      	str	r2, [r3, #8]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	2201      	movs	r2, #1
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1a      	ldr	r2, [r3, #32]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	43db      	mvns	r3, r3
 800428a:	401a      	ands	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	431a      	orrs	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	621a      	str	r2, [r3, #32]
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e05a      	b.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a21      	ldr	r2, [pc, #132]	@ (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004318:	d01d      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1d      	ldr	r2, [pc, #116]	@ (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1b      	ldr	r2, [pc, #108]	@ (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1a      	ldr	r2, [pc, #104]	@ (800439c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a18      	ldr	r2, [pc, #96]	@ (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a17      	ldr	r2, [pc, #92]	@ (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a15      	ldr	r2, [pc, #84]	@ (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d10c      	bne.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800435c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	4313      	orrs	r3, r2
 8004366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40010000 	.word	0x40010000
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800
 800439c:	40000c00 	.word	0x40000c00
 80043a0:	40010400 	.word	0x40010400
 80043a4:	40014000 	.word	0x40014000
 80043a8:	40001800 	.word	0x40001800

080043ac <siprintf>:
 80043ac:	b40e      	push	{r1, r2, r3}
 80043ae:	b500      	push	{lr}
 80043b0:	b09c      	sub	sp, #112	@ 0x70
 80043b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80043b4:	9002      	str	r0, [sp, #8]
 80043b6:	9006      	str	r0, [sp, #24]
 80043b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80043bc:	4809      	ldr	r0, [pc, #36]	@ (80043e4 <siprintf+0x38>)
 80043be:	9107      	str	r1, [sp, #28]
 80043c0:	9104      	str	r1, [sp, #16]
 80043c2:	4909      	ldr	r1, [pc, #36]	@ (80043e8 <siprintf+0x3c>)
 80043c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80043c8:	9105      	str	r1, [sp, #20]
 80043ca:	6800      	ldr	r0, [r0, #0]
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	a902      	add	r1, sp, #8
 80043d0:	f000 f994 	bl	80046fc <_svfiprintf_r>
 80043d4:	9b02      	ldr	r3, [sp, #8]
 80043d6:	2200      	movs	r2, #0
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	b01c      	add	sp, #112	@ 0x70
 80043dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e0:	b003      	add	sp, #12
 80043e2:	4770      	bx	lr
 80043e4:	20000028 	.word	0x20000028
 80043e8:	ffff0208 	.word	0xffff0208

080043ec <memset>:
 80043ec:	4402      	add	r2, r0
 80043ee:	4603      	mov	r3, r0
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d100      	bne.n	80043f6 <memset+0xa>
 80043f4:	4770      	bx	lr
 80043f6:	f803 1b01 	strb.w	r1, [r3], #1
 80043fa:	e7f9      	b.n	80043f0 <memset+0x4>

080043fc <__errno>:
 80043fc:	4b01      	ldr	r3, [pc, #4]	@ (8004404 <__errno+0x8>)
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000028 	.word	0x20000028

08004408 <__libc_init_array>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4d0d      	ldr	r5, [pc, #52]	@ (8004440 <__libc_init_array+0x38>)
 800440c:	4c0d      	ldr	r4, [pc, #52]	@ (8004444 <__libc_init_array+0x3c>)
 800440e:	1b64      	subs	r4, r4, r5
 8004410:	10a4      	asrs	r4, r4, #2
 8004412:	2600      	movs	r6, #0
 8004414:	42a6      	cmp	r6, r4
 8004416:	d109      	bne.n	800442c <__libc_init_array+0x24>
 8004418:	4d0b      	ldr	r5, [pc, #44]	@ (8004448 <__libc_init_array+0x40>)
 800441a:	4c0c      	ldr	r4, [pc, #48]	@ (800444c <__libc_init_array+0x44>)
 800441c:	f000 fc66 	bl	8004cec <_init>
 8004420:	1b64      	subs	r4, r4, r5
 8004422:	10a4      	asrs	r4, r4, #2
 8004424:	2600      	movs	r6, #0
 8004426:	42a6      	cmp	r6, r4
 8004428:	d105      	bne.n	8004436 <__libc_init_array+0x2e>
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004430:	4798      	blx	r3
 8004432:	3601      	adds	r6, #1
 8004434:	e7ee      	b.n	8004414 <__libc_init_array+0xc>
 8004436:	f855 3b04 	ldr.w	r3, [r5], #4
 800443a:	4798      	blx	r3
 800443c:	3601      	adds	r6, #1
 800443e:	e7f2      	b.n	8004426 <__libc_init_array+0x1e>
 8004440:	08004d9c 	.word	0x08004d9c
 8004444:	08004d9c 	.word	0x08004d9c
 8004448:	08004d9c 	.word	0x08004d9c
 800444c:	08004da0 	.word	0x08004da0

08004450 <__retarget_lock_acquire_recursive>:
 8004450:	4770      	bx	lr

08004452 <__retarget_lock_release_recursive>:
 8004452:	4770      	bx	lr

08004454 <_free_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4605      	mov	r5, r0
 8004458:	2900      	cmp	r1, #0
 800445a:	d041      	beq.n	80044e0 <_free_r+0x8c>
 800445c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004460:	1f0c      	subs	r4, r1, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	bfb8      	it	lt
 8004466:	18e4      	addlt	r4, r4, r3
 8004468:	f000 f8e0 	bl	800462c <__malloc_lock>
 800446c:	4a1d      	ldr	r2, [pc, #116]	@ (80044e4 <_free_r+0x90>)
 800446e:	6813      	ldr	r3, [r2, #0]
 8004470:	b933      	cbnz	r3, 8004480 <_free_r+0x2c>
 8004472:	6063      	str	r3, [r4, #4]
 8004474:	6014      	str	r4, [r2, #0]
 8004476:	4628      	mov	r0, r5
 8004478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800447c:	f000 b8dc 	b.w	8004638 <__malloc_unlock>
 8004480:	42a3      	cmp	r3, r4
 8004482:	d908      	bls.n	8004496 <_free_r+0x42>
 8004484:	6820      	ldr	r0, [r4, #0]
 8004486:	1821      	adds	r1, r4, r0
 8004488:	428b      	cmp	r3, r1
 800448a:	bf01      	itttt	eq
 800448c:	6819      	ldreq	r1, [r3, #0]
 800448e:	685b      	ldreq	r3, [r3, #4]
 8004490:	1809      	addeq	r1, r1, r0
 8004492:	6021      	streq	r1, [r4, #0]
 8004494:	e7ed      	b.n	8004472 <_free_r+0x1e>
 8004496:	461a      	mov	r2, r3
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	b10b      	cbz	r3, 80044a0 <_free_r+0x4c>
 800449c:	42a3      	cmp	r3, r4
 800449e:	d9fa      	bls.n	8004496 <_free_r+0x42>
 80044a0:	6811      	ldr	r1, [r2, #0]
 80044a2:	1850      	adds	r0, r2, r1
 80044a4:	42a0      	cmp	r0, r4
 80044a6:	d10b      	bne.n	80044c0 <_free_r+0x6c>
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	4401      	add	r1, r0
 80044ac:	1850      	adds	r0, r2, r1
 80044ae:	4283      	cmp	r3, r0
 80044b0:	6011      	str	r1, [r2, #0]
 80044b2:	d1e0      	bne.n	8004476 <_free_r+0x22>
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	6053      	str	r3, [r2, #4]
 80044ba:	4408      	add	r0, r1
 80044bc:	6010      	str	r0, [r2, #0]
 80044be:	e7da      	b.n	8004476 <_free_r+0x22>
 80044c0:	d902      	bls.n	80044c8 <_free_r+0x74>
 80044c2:	230c      	movs	r3, #12
 80044c4:	602b      	str	r3, [r5, #0]
 80044c6:	e7d6      	b.n	8004476 <_free_r+0x22>
 80044c8:	6820      	ldr	r0, [r4, #0]
 80044ca:	1821      	adds	r1, r4, r0
 80044cc:	428b      	cmp	r3, r1
 80044ce:	bf04      	itt	eq
 80044d0:	6819      	ldreq	r1, [r3, #0]
 80044d2:	685b      	ldreq	r3, [r3, #4]
 80044d4:	6063      	str	r3, [r4, #4]
 80044d6:	bf04      	itt	eq
 80044d8:	1809      	addeq	r1, r1, r0
 80044da:	6021      	streq	r1, [r4, #0]
 80044dc:	6054      	str	r4, [r2, #4]
 80044de:	e7ca      	b.n	8004476 <_free_r+0x22>
 80044e0:	bd38      	pop	{r3, r4, r5, pc}
 80044e2:	bf00      	nop
 80044e4:	20000298 	.word	0x20000298

080044e8 <sbrk_aligned>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	4e0f      	ldr	r6, [pc, #60]	@ (8004528 <sbrk_aligned+0x40>)
 80044ec:	460c      	mov	r4, r1
 80044ee:	6831      	ldr	r1, [r6, #0]
 80044f0:	4605      	mov	r5, r0
 80044f2:	b911      	cbnz	r1, 80044fa <sbrk_aligned+0x12>
 80044f4:	f000 fba6 	bl	8004c44 <_sbrk_r>
 80044f8:	6030      	str	r0, [r6, #0]
 80044fa:	4621      	mov	r1, r4
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 fba1 	bl	8004c44 <_sbrk_r>
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	d103      	bne.n	800450e <sbrk_aligned+0x26>
 8004506:	f04f 34ff 	mov.w	r4, #4294967295
 800450a:	4620      	mov	r0, r4
 800450c:	bd70      	pop	{r4, r5, r6, pc}
 800450e:	1cc4      	adds	r4, r0, #3
 8004510:	f024 0403 	bic.w	r4, r4, #3
 8004514:	42a0      	cmp	r0, r4
 8004516:	d0f8      	beq.n	800450a <sbrk_aligned+0x22>
 8004518:	1a21      	subs	r1, r4, r0
 800451a:	4628      	mov	r0, r5
 800451c:	f000 fb92 	bl	8004c44 <_sbrk_r>
 8004520:	3001      	adds	r0, #1
 8004522:	d1f2      	bne.n	800450a <sbrk_aligned+0x22>
 8004524:	e7ef      	b.n	8004506 <sbrk_aligned+0x1e>
 8004526:	bf00      	nop
 8004528:	20000294 	.word	0x20000294

0800452c <_malloc_r>:
 800452c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004530:	1ccd      	adds	r5, r1, #3
 8004532:	f025 0503 	bic.w	r5, r5, #3
 8004536:	3508      	adds	r5, #8
 8004538:	2d0c      	cmp	r5, #12
 800453a:	bf38      	it	cc
 800453c:	250c      	movcc	r5, #12
 800453e:	2d00      	cmp	r5, #0
 8004540:	4606      	mov	r6, r0
 8004542:	db01      	blt.n	8004548 <_malloc_r+0x1c>
 8004544:	42a9      	cmp	r1, r5
 8004546:	d904      	bls.n	8004552 <_malloc_r+0x26>
 8004548:	230c      	movs	r3, #12
 800454a:	6033      	str	r3, [r6, #0]
 800454c:	2000      	movs	r0, #0
 800454e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004552:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004628 <_malloc_r+0xfc>
 8004556:	f000 f869 	bl	800462c <__malloc_lock>
 800455a:	f8d8 3000 	ldr.w	r3, [r8]
 800455e:	461c      	mov	r4, r3
 8004560:	bb44      	cbnz	r4, 80045b4 <_malloc_r+0x88>
 8004562:	4629      	mov	r1, r5
 8004564:	4630      	mov	r0, r6
 8004566:	f7ff ffbf 	bl	80044e8 <sbrk_aligned>
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	4604      	mov	r4, r0
 800456e:	d158      	bne.n	8004622 <_malloc_r+0xf6>
 8004570:	f8d8 4000 	ldr.w	r4, [r8]
 8004574:	4627      	mov	r7, r4
 8004576:	2f00      	cmp	r7, #0
 8004578:	d143      	bne.n	8004602 <_malloc_r+0xd6>
 800457a:	2c00      	cmp	r4, #0
 800457c:	d04b      	beq.n	8004616 <_malloc_r+0xea>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	4639      	mov	r1, r7
 8004582:	4630      	mov	r0, r6
 8004584:	eb04 0903 	add.w	r9, r4, r3
 8004588:	f000 fb5c 	bl	8004c44 <_sbrk_r>
 800458c:	4581      	cmp	r9, r0
 800458e:	d142      	bne.n	8004616 <_malloc_r+0xea>
 8004590:	6821      	ldr	r1, [r4, #0]
 8004592:	1a6d      	subs	r5, r5, r1
 8004594:	4629      	mov	r1, r5
 8004596:	4630      	mov	r0, r6
 8004598:	f7ff ffa6 	bl	80044e8 <sbrk_aligned>
 800459c:	3001      	adds	r0, #1
 800459e:	d03a      	beq.n	8004616 <_malloc_r+0xea>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	442b      	add	r3, r5
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	f8d8 3000 	ldr.w	r3, [r8]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	bb62      	cbnz	r2, 8004608 <_malloc_r+0xdc>
 80045ae:	f8c8 7000 	str.w	r7, [r8]
 80045b2:	e00f      	b.n	80045d4 <_malloc_r+0xa8>
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	1b52      	subs	r2, r2, r5
 80045b8:	d420      	bmi.n	80045fc <_malloc_r+0xd0>
 80045ba:	2a0b      	cmp	r2, #11
 80045bc:	d917      	bls.n	80045ee <_malloc_r+0xc2>
 80045be:	1961      	adds	r1, r4, r5
 80045c0:	42a3      	cmp	r3, r4
 80045c2:	6025      	str	r5, [r4, #0]
 80045c4:	bf18      	it	ne
 80045c6:	6059      	strne	r1, [r3, #4]
 80045c8:	6863      	ldr	r3, [r4, #4]
 80045ca:	bf08      	it	eq
 80045cc:	f8c8 1000 	streq.w	r1, [r8]
 80045d0:	5162      	str	r2, [r4, r5]
 80045d2:	604b      	str	r3, [r1, #4]
 80045d4:	4630      	mov	r0, r6
 80045d6:	f000 f82f 	bl	8004638 <__malloc_unlock>
 80045da:	f104 000b 	add.w	r0, r4, #11
 80045de:	1d23      	adds	r3, r4, #4
 80045e0:	f020 0007 	bic.w	r0, r0, #7
 80045e4:	1ac2      	subs	r2, r0, r3
 80045e6:	bf1c      	itt	ne
 80045e8:	1a1b      	subne	r3, r3, r0
 80045ea:	50a3      	strne	r3, [r4, r2]
 80045ec:	e7af      	b.n	800454e <_malloc_r+0x22>
 80045ee:	6862      	ldr	r2, [r4, #4]
 80045f0:	42a3      	cmp	r3, r4
 80045f2:	bf0c      	ite	eq
 80045f4:	f8c8 2000 	streq.w	r2, [r8]
 80045f8:	605a      	strne	r2, [r3, #4]
 80045fa:	e7eb      	b.n	80045d4 <_malloc_r+0xa8>
 80045fc:	4623      	mov	r3, r4
 80045fe:	6864      	ldr	r4, [r4, #4]
 8004600:	e7ae      	b.n	8004560 <_malloc_r+0x34>
 8004602:	463c      	mov	r4, r7
 8004604:	687f      	ldr	r7, [r7, #4]
 8004606:	e7b6      	b.n	8004576 <_malloc_r+0x4a>
 8004608:	461a      	mov	r2, r3
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	42a3      	cmp	r3, r4
 800460e:	d1fb      	bne.n	8004608 <_malloc_r+0xdc>
 8004610:	2300      	movs	r3, #0
 8004612:	6053      	str	r3, [r2, #4]
 8004614:	e7de      	b.n	80045d4 <_malloc_r+0xa8>
 8004616:	230c      	movs	r3, #12
 8004618:	6033      	str	r3, [r6, #0]
 800461a:	4630      	mov	r0, r6
 800461c:	f000 f80c 	bl	8004638 <__malloc_unlock>
 8004620:	e794      	b.n	800454c <_malloc_r+0x20>
 8004622:	6005      	str	r5, [r0, #0]
 8004624:	e7d6      	b.n	80045d4 <_malloc_r+0xa8>
 8004626:	bf00      	nop
 8004628:	20000298 	.word	0x20000298

0800462c <__malloc_lock>:
 800462c:	4801      	ldr	r0, [pc, #4]	@ (8004634 <__malloc_lock+0x8>)
 800462e:	f7ff bf0f 	b.w	8004450 <__retarget_lock_acquire_recursive>
 8004632:	bf00      	nop
 8004634:	20000290 	.word	0x20000290

08004638 <__malloc_unlock>:
 8004638:	4801      	ldr	r0, [pc, #4]	@ (8004640 <__malloc_unlock+0x8>)
 800463a:	f7ff bf0a 	b.w	8004452 <__retarget_lock_release_recursive>
 800463e:	bf00      	nop
 8004640:	20000290 	.word	0x20000290

08004644 <__ssputs_r>:
 8004644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004648:	688e      	ldr	r6, [r1, #8]
 800464a:	461f      	mov	r7, r3
 800464c:	42be      	cmp	r6, r7
 800464e:	680b      	ldr	r3, [r1, #0]
 8004650:	4682      	mov	sl, r0
 8004652:	460c      	mov	r4, r1
 8004654:	4690      	mov	r8, r2
 8004656:	d82d      	bhi.n	80046b4 <__ssputs_r+0x70>
 8004658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800465c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004660:	d026      	beq.n	80046b0 <__ssputs_r+0x6c>
 8004662:	6965      	ldr	r5, [r4, #20]
 8004664:	6909      	ldr	r1, [r1, #16]
 8004666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800466a:	eba3 0901 	sub.w	r9, r3, r1
 800466e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004672:	1c7b      	adds	r3, r7, #1
 8004674:	444b      	add	r3, r9
 8004676:	106d      	asrs	r5, r5, #1
 8004678:	429d      	cmp	r5, r3
 800467a:	bf38      	it	cc
 800467c:	461d      	movcc	r5, r3
 800467e:	0553      	lsls	r3, r2, #21
 8004680:	d527      	bpl.n	80046d2 <__ssputs_r+0x8e>
 8004682:	4629      	mov	r1, r5
 8004684:	f7ff ff52 	bl	800452c <_malloc_r>
 8004688:	4606      	mov	r6, r0
 800468a:	b360      	cbz	r0, 80046e6 <__ssputs_r+0xa2>
 800468c:	6921      	ldr	r1, [r4, #16]
 800468e:	464a      	mov	r2, r9
 8004690:	f000 fae8 	bl	8004c64 <memcpy>
 8004694:	89a3      	ldrh	r3, [r4, #12]
 8004696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800469a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800469e:	81a3      	strh	r3, [r4, #12]
 80046a0:	6126      	str	r6, [r4, #16]
 80046a2:	6165      	str	r5, [r4, #20]
 80046a4:	444e      	add	r6, r9
 80046a6:	eba5 0509 	sub.w	r5, r5, r9
 80046aa:	6026      	str	r6, [r4, #0]
 80046ac:	60a5      	str	r5, [r4, #8]
 80046ae:	463e      	mov	r6, r7
 80046b0:	42be      	cmp	r6, r7
 80046b2:	d900      	bls.n	80046b6 <__ssputs_r+0x72>
 80046b4:	463e      	mov	r6, r7
 80046b6:	6820      	ldr	r0, [r4, #0]
 80046b8:	4632      	mov	r2, r6
 80046ba:	4641      	mov	r1, r8
 80046bc:	f000 faa8 	bl	8004c10 <memmove>
 80046c0:	68a3      	ldr	r3, [r4, #8]
 80046c2:	1b9b      	subs	r3, r3, r6
 80046c4:	60a3      	str	r3, [r4, #8]
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	4433      	add	r3, r6
 80046ca:	6023      	str	r3, [r4, #0]
 80046cc:	2000      	movs	r0, #0
 80046ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d2:	462a      	mov	r2, r5
 80046d4:	f000 fad4 	bl	8004c80 <_realloc_r>
 80046d8:	4606      	mov	r6, r0
 80046da:	2800      	cmp	r0, #0
 80046dc:	d1e0      	bne.n	80046a0 <__ssputs_r+0x5c>
 80046de:	6921      	ldr	r1, [r4, #16]
 80046e0:	4650      	mov	r0, sl
 80046e2:	f7ff feb7 	bl	8004454 <_free_r>
 80046e6:	230c      	movs	r3, #12
 80046e8:	f8ca 3000 	str.w	r3, [sl]
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046f2:	81a3      	strh	r3, [r4, #12]
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	e7e9      	b.n	80046ce <__ssputs_r+0x8a>
	...

080046fc <_svfiprintf_r>:
 80046fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004700:	4698      	mov	r8, r3
 8004702:	898b      	ldrh	r3, [r1, #12]
 8004704:	061b      	lsls	r3, r3, #24
 8004706:	b09d      	sub	sp, #116	@ 0x74
 8004708:	4607      	mov	r7, r0
 800470a:	460d      	mov	r5, r1
 800470c:	4614      	mov	r4, r2
 800470e:	d510      	bpl.n	8004732 <_svfiprintf_r+0x36>
 8004710:	690b      	ldr	r3, [r1, #16]
 8004712:	b973      	cbnz	r3, 8004732 <_svfiprintf_r+0x36>
 8004714:	2140      	movs	r1, #64	@ 0x40
 8004716:	f7ff ff09 	bl	800452c <_malloc_r>
 800471a:	6028      	str	r0, [r5, #0]
 800471c:	6128      	str	r0, [r5, #16]
 800471e:	b930      	cbnz	r0, 800472e <_svfiprintf_r+0x32>
 8004720:	230c      	movs	r3, #12
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	f04f 30ff 	mov.w	r0, #4294967295
 8004728:	b01d      	add	sp, #116	@ 0x74
 800472a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472e:	2340      	movs	r3, #64	@ 0x40
 8004730:	616b      	str	r3, [r5, #20]
 8004732:	2300      	movs	r3, #0
 8004734:	9309      	str	r3, [sp, #36]	@ 0x24
 8004736:	2320      	movs	r3, #32
 8004738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800473c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004740:	2330      	movs	r3, #48	@ 0x30
 8004742:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80048e0 <_svfiprintf_r+0x1e4>
 8004746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800474a:	f04f 0901 	mov.w	r9, #1
 800474e:	4623      	mov	r3, r4
 8004750:	469a      	mov	sl, r3
 8004752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004756:	b10a      	cbz	r2, 800475c <_svfiprintf_r+0x60>
 8004758:	2a25      	cmp	r2, #37	@ 0x25
 800475a:	d1f9      	bne.n	8004750 <_svfiprintf_r+0x54>
 800475c:	ebba 0b04 	subs.w	fp, sl, r4
 8004760:	d00b      	beq.n	800477a <_svfiprintf_r+0x7e>
 8004762:	465b      	mov	r3, fp
 8004764:	4622      	mov	r2, r4
 8004766:	4629      	mov	r1, r5
 8004768:	4638      	mov	r0, r7
 800476a:	f7ff ff6b 	bl	8004644 <__ssputs_r>
 800476e:	3001      	adds	r0, #1
 8004770:	f000 80a7 	beq.w	80048c2 <_svfiprintf_r+0x1c6>
 8004774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004776:	445a      	add	r2, fp
 8004778:	9209      	str	r2, [sp, #36]	@ 0x24
 800477a:	f89a 3000 	ldrb.w	r3, [sl]
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 809f 	beq.w	80048c2 <_svfiprintf_r+0x1c6>
 8004784:	2300      	movs	r3, #0
 8004786:	f04f 32ff 	mov.w	r2, #4294967295
 800478a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800478e:	f10a 0a01 	add.w	sl, sl, #1
 8004792:	9304      	str	r3, [sp, #16]
 8004794:	9307      	str	r3, [sp, #28]
 8004796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800479a:	931a      	str	r3, [sp, #104]	@ 0x68
 800479c:	4654      	mov	r4, sl
 800479e:	2205      	movs	r2, #5
 80047a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a4:	484e      	ldr	r0, [pc, #312]	@ (80048e0 <_svfiprintf_r+0x1e4>)
 80047a6:	f7fb fd3b 	bl	8000220 <memchr>
 80047aa:	9a04      	ldr	r2, [sp, #16]
 80047ac:	b9d8      	cbnz	r0, 80047e6 <_svfiprintf_r+0xea>
 80047ae:	06d0      	lsls	r0, r2, #27
 80047b0:	bf44      	itt	mi
 80047b2:	2320      	movmi	r3, #32
 80047b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047b8:	0711      	lsls	r1, r2, #28
 80047ba:	bf44      	itt	mi
 80047bc:	232b      	movmi	r3, #43	@ 0x2b
 80047be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047c2:	f89a 3000 	ldrb.w	r3, [sl]
 80047c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80047c8:	d015      	beq.n	80047f6 <_svfiprintf_r+0xfa>
 80047ca:	9a07      	ldr	r2, [sp, #28]
 80047cc:	4654      	mov	r4, sl
 80047ce:	2000      	movs	r0, #0
 80047d0:	f04f 0c0a 	mov.w	ip, #10
 80047d4:	4621      	mov	r1, r4
 80047d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047da:	3b30      	subs	r3, #48	@ 0x30
 80047dc:	2b09      	cmp	r3, #9
 80047de:	d94b      	bls.n	8004878 <_svfiprintf_r+0x17c>
 80047e0:	b1b0      	cbz	r0, 8004810 <_svfiprintf_r+0x114>
 80047e2:	9207      	str	r2, [sp, #28]
 80047e4:	e014      	b.n	8004810 <_svfiprintf_r+0x114>
 80047e6:	eba0 0308 	sub.w	r3, r0, r8
 80047ea:	fa09 f303 	lsl.w	r3, r9, r3
 80047ee:	4313      	orrs	r3, r2
 80047f0:	9304      	str	r3, [sp, #16]
 80047f2:	46a2      	mov	sl, r4
 80047f4:	e7d2      	b.n	800479c <_svfiprintf_r+0xa0>
 80047f6:	9b03      	ldr	r3, [sp, #12]
 80047f8:	1d19      	adds	r1, r3, #4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	9103      	str	r1, [sp, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bfbb      	ittet	lt
 8004802:	425b      	neglt	r3, r3
 8004804:	f042 0202 	orrlt.w	r2, r2, #2
 8004808:	9307      	strge	r3, [sp, #28]
 800480a:	9307      	strlt	r3, [sp, #28]
 800480c:	bfb8      	it	lt
 800480e:	9204      	strlt	r2, [sp, #16]
 8004810:	7823      	ldrb	r3, [r4, #0]
 8004812:	2b2e      	cmp	r3, #46	@ 0x2e
 8004814:	d10a      	bne.n	800482c <_svfiprintf_r+0x130>
 8004816:	7863      	ldrb	r3, [r4, #1]
 8004818:	2b2a      	cmp	r3, #42	@ 0x2a
 800481a:	d132      	bne.n	8004882 <_svfiprintf_r+0x186>
 800481c:	9b03      	ldr	r3, [sp, #12]
 800481e:	1d1a      	adds	r2, r3, #4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	9203      	str	r2, [sp, #12]
 8004824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004828:	3402      	adds	r4, #2
 800482a:	9305      	str	r3, [sp, #20]
 800482c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80048f0 <_svfiprintf_r+0x1f4>
 8004830:	7821      	ldrb	r1, [r4, #0]
 8004832:	2203      	movs	r2, #3
 8004834:	4650      	mov	r0, sl
 8004836:	f7fb fcf3 	bl	8000220 <memchr>
 800483a:	b138      	cbz	r0, 800484c <_svfiprintf_r+0x150>
 800483c:	9b04      	ldr	r3, [sp, #16]
 800483e:	eba0 000a 	sub.w	r0, r0, sl
 8004842:	2240      	movs	r2, #64	@ 0x40
 8004844:	4082      	lsls	r2, r0
 8004846:	4313      	orrs	r3, r2
 8004848:	3401      	adds	r4, #1
 800484a:	9304      	str	r3, [sp, #16]
 800484c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004850:	4824      	ldr	r0, [pc, #144]	@ (80048e4 <_svfiprintf_r+0x1e8>)
 8004852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004856:	2206      	movs	r2, #6
 8004858:	f7fb fce2 	bl	8000220 <memchr>
 800485c:	2800      	cmp	r0, #0
 800485e:	d036      	beq.n	80048ce <_svfiprintf_r+0x1d2>
 8004860:	4b21      	ldr	r3, [pc, #132]	@ (80048e8 <_svfiprintf_r+0x1ec>)
 8004862:	bb1b      	cbnz	r3, 80048ac <_svfiprintf_r+0x1b0>
 8004864:	9b03      	ldr	r3, [sp, #12]
 8004866:	3307      	adds	r3, #7
 8004868:	f023 0307 	bic.w	r3, r3, #7
 800486c:	3308      	adds	r3, #8
 800486e:	9303      	str	r3, [sp, #12]
 8004870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004872:	4433      	add	r3, r6
 8004874:	9309      	str	r3, [sp, #36]	@ 0x24
 8004876:	e76a      	b.n	800474e <_svfiprintf_r+0x52>
 8004878:	fb0c 3202 	mla	r2, ip, r2, r3
 800487c:	460c      	mov	r4, r1
 800487e:	2001      	movs	r0, #1
 8004880:	e7a8      	b.n	80047d4 <_svfiprintf_r+0xd8>
 8004882:	2300      	movs	r3, #0
 8004884:	3401      	adds	r4, #1
 8004886:	9305      	str	r3, [sp, #20]
 8004888:	4619      	mov	r1, r3
 800488a:	f04f 0c0a 	mov.w	ip, #10
 800488e:	4620      	mov	r0, r4
 8004890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004894:	3a30      	subs	r2, #48	@ 0x30
 8004896:	2a09      	cmp	r2, #9
 8004898:	d903      	bls.n	80048a2 <_svfiprintf_r+0x1a6>
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0c6      	beq.n	800482c <_svfiprintf_r+0x130>
 800489e:	9105      	str	r1, [sp, #20]
 80048a0:	e7c4      	b.n	800482c <_svfiprintf_r+0x130>
 80048a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80048a6:	4604      	mov	r4, r0
 80048a8:	2301      	movs	r3, #1
 80048aa:	e7f0      	b.n	800488e <_svfiprintf_r+0x192>
 80048ac:	ab03      	add	r3, sp, #12
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	462a      	mov	r2, r5
 80048b2:	4b0e      	ldr	r3, [pc, #56]	@ (80048ec <_svfiprintf_r+0x1f0>)
 80048b4:	a904      	add	r1, sp, #16
 80048b6:	4638      	mov	r0, r7
 80048b8:	f3af 8000 	nop.w
 80048bc:	1c42      	adds	r2, r0, #1
 80048be:	4606      	mov	r6, r0
 80048c0:	d1d6      	bne.n	8004870 <_svfiprintf_r+0x174>
 80048c2:	89ab      	ldrh	r3, [r5, #12]
 80048c4:	065b      	lsls	r3, r3, #25
 80048c6:	f53f af2d 	bmi.w	8004724 <_svfiprintf_r+0x28>
 80048ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048cc:	e72c      	b.n	8004728 <_svfiprintf_r+0x2c>
 80048ce:	ab03      	add	r3, sp, #12
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	462a      	mov	r2, r5
 80048d4:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <_svfiprintf_r+0x1f0>)
 80048d6:	a904      	add	r1, sp, #16
 80048d8:	4638      	mov	r0, r7
 80048da:	f000 f879 	bl	80049d0 <_printf_i>
 80048de:	e7ed      	b.n	80048bc <_svfiprintf_r+0x1c0>
 80048e0:	08004d60 	.word	0x08004d60
 80048e4:	08004d6a 	.word	0x08004d6a
 80048e8:	00000000 	.word	0x00000000
 80048ec:	08004645 	.word	0x08004645
 80048f0:	08004d66 	.word	0x08004d66

080048f4 <_printf_common>:
 80048f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f8:	4616      	mov	r6, r2
 80048fa:	4698      	mov	r8, r3
 80048fc:	688a      	ldr	r2, [r1, #8]
 80048fe:	690b      	ldr	r3, [r1, #16]
 8004900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004904:	4293      	cmp	r3, r2
 8004906:	bfb8      	it	lt
 8004908:	4613      	movlt	r3, r2
 800490a:	6033      	str	r3, [r6, #0]
 800490c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004910:	4607      	mov	r7, r0
 8004912:	460c      	mov	r4, r1
 8004914:	b10a      	cbz	r2, 800491a <_printf_common+0x26>
 8004916:	3301      	adds	r3, #1
 8004918:	6033      	str	r3, [r6, #0]
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	0699      	lsls	r1, r3, #26
 800491e:	bf42      	ittt	mi
 8004920:	6833      	ldrmi	r3, [r6, #0]
 8004922:	3302      	addmi	r3, #2
 8004924:	6033      	strmi	r3, [r6, #0]
 8004926:	6825      	ldr	r5, [r4, #0]
 8004928:	f015 0506 	ands.w	r5, r5, #6
 800492c:	d106      	bne.n	800493c <_printf_common+0x48>
 800492e:	f104 0a19 	add.w	sl, r4, #25
 8004932:	68e3      	ldr	r3, [r4, #12]
 8004934:	6832      	ldr	r2, [r6, #0]
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	42ab      	cmp	r3, r5
 800493a:	dc26      	bgt.n	800498a <_printf_common+0x96>
 800493c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004940:	6822      	ldr	r2, [r4, #0]
 8004942:	3b00      	subs	r3, #0
 8004944:	bf18      	it	ne
 8004946:	2301      	movne	r3, #1
 8004948:	0692      	lsls	r2, r2, #26
 800494a:	d42b      	bmi.n	80049a4 <_printf_common+0xb0>
 800494c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004950:	4641      	mov	r1, r8
 8004952:	4638      	mov	r0, r7
 8004954:	47c8      	blx	r9
 8004956:	3001      	adds	r0, #1
 8004958:	d01e      	beq.n	8004998 <_printf_common+0xa4>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	6922      	ldr	r2, [r4, #16]
 800495e:	f003 0306 	and.w	r3, r3, #6
 8004962:	2b04      	cmp	r3, #4
 8004964:	bf02      	ittt	eq
 8004966:	68e5      	ldreq	r5, [r4, #12]
 8004968:	6833      	ldreq	r3, [r6, #0]
 800496a:	1aed      	subeq	r5, r5, r3
 800496c:	68a3      	ldr	r3, [r4, #8]
 800496e:	bf0c      	ite	eq
 8004970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004974:	2500      	movne	r5, #0
 8004976:	4293      	cmp	r3, r2
 8004978:	bfc4      	itt	gt
 800497a:	1a9b      	subgt	r3, r3, r2
 800497c:	18ed      	addgt	r5, r5, r3
 800497e:	2600      	movs	r6, #0
 8004980:	341a      	adds	r4, #26
 8004982:	42b5      	cmp	r5, r6
 8004984:	d11a      	bne.n	80049bc <_printf_common+0xc8>
 8004986:	2000      	movs	r0, #0
 8004988:	e008      	b.n	800499c <_printf_common+0xa8>
 800498a:	2301      	movs	r3, #1
 800498c:	4652      	mov	r2, sl
 800498e:	4641      	mov	r1, r8
 8004990:	4638      	mov	r0, r7
 8004992:	47c8      	blx	r9
 8004994:	3001      	adds	r0, #1
 8004996:	d103      	bne.n	80049a0 <_printf_common+0xac>
 8004998:	f04f 30ff 	mov.w	r0, #4294967295
 800499c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a0:	3501      	adds	r5, #1
 80049a2:	e7c6      	b.n	8004932 <_printf_common+0x3e>
 80049a4:	18e1      	adds	r1, r4, r3
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	2030      	movs	r0, #48	@ 0x30
 80049aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049ae:	4422      	add	r2, r4
 80049b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049b8:	3302      	adds	r3, #2
 80049ba:	e7c7      	b.n	800494c <_printf_common+0x58>
 80049bc:	2301      	movs	r3, #1
 80049be:	4622      	mov	r2, r4
 80049c0:	4641      	mov	r1, r8
 80049c2:	4638      	mov	r0, r7
 80049c4:	47c8      	blx	r9
 80049c6:	3001      	adds	r0, #1
 80049c8:	d0e6      	beq.n	8004998 <_printf_common+0xa4>
 80049ca:	3601      	adds	r6, #1
 80049cc:	e7d9      	b.n	8004982 <_printf_common+0x8e>
	...

080049d0 <_printf_i>:
 80049d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049d4:	7e0f      	ldrb	r7, [r1, #24]
 80049d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049d8:	2f78      	cmp	r7, #120	@ 0x78
 80049da:	4691      	mov	r9, r2
 80049dc:	4680      	mov	r8, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	469a      	mov	sl, r3
 80049e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049e6:	d807      	bhi.n	80049f8 <_printf_i+0x28>
 80049e8:	2f62      	cmp	r7, #98	@ 0x62
 80049ea:	d80a      	bhi.n	8004a02 <_printf_i+0x32>
 80049ec:	2f00      	cmp	r7, #0
 80049ee:	f000 80d2 	beq.w	8004b96 <_printf_i+0x1c6>
 80049f2:	2f58      	cmp	r7, #88	@ 0x58
 80049f4:	f000 80b9 	beq.w	8004b6a <_printf_i+0x19a>
 80049f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a00:	e03a      	b.n	8004a78 <_printf_i+0xa8>
 8004a02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a06:	2b15      	cmp	r3, #21
 8004a08:	d8f6      	bhi.n	80049f8 <_printf_i+0x28>
 8004a0a:	a101      	add	r1, pc, #4	@ (adr r1, 8004a10 <_printf_i+0x40>)
 8004a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a10:	08004a69 	.word	0x08004a69
 8004a14:	08004a7d 	.word	0x08004a7d
 8004a18:	080049f9 	.word	0x080049f9
 8004a1c:	080049f9 	.word	0x080049f9
 8004a20:	080049f9 	.word	0x080049f9
 8004a24:	080049f9 	.word	0x080049f9
 8004a28:	08004a7d 	.word	0x08004a7d
 8004a2c:	080049f9 	.word	0x080049f9
 8004a30:	080049f9 	.word	0x080049f9
 8004a34:	080049f9 	.word	0x080049f9
 8004a38:	080049f9 	.word	0x080049f9
 8004a3c:	08004b7d 	.word	0x08004b7d
 8004a40:	08004aa7 	.word	0x08004aa7
 8004a44:	08004b37 	.word	0x08004b37
 8004a48:	080049f9 	.word	0x080049f9
 8004a4c:	080049f9 	.word	0x080049f9
 8004a50:	08004b9f 	.word	0x08004b9f
 8004a54:	080049f9 	.word	0x080049f9
 8004a58:	08004aa7 	.word	0x08004aa7
 8004a5c:	080049f9 	.word	0x080049f9
 8004a60:	080049f9 	.word	0x080049f9
 8004a64:	08004b3f 	.word	0x08004b3f
 8004a68:	6833      	ldr	r3, [r6, #0]
 8004a6a:	1d1a      	adds	r2, r3, #4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6032      	str	r2, [r6, #0]
 8004a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e09d      	b.n	8004bb8 <_printf_i+0x1e8>
 8004a7c:	6833      	ldr	r3, [r6, #0]
 8004a7e:	6820      	ldr	r0, [r4, #0]
 8004a80:	1d19      	adds	r1, r3, #4
 8004a82:	6031      	str	r1, [r6, #0]
 8004a84:	0606      	lsls	r6, r0, #24
 8004a86:	d501      	bpl.n	8004a8c <_printf_i+0xbc>
 8004a88:	681d      	ldr	r5, [r3, #0]
 8004a8a:	e003      	b.n	8004a94 <_printf_i+0xc4>
 8004a8c:	0645      	lsls	r5, r0, #25
 8004a8e:	d5fb      	bpl.n	8004a88 <_printf_i+0xb8>
 8004a90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a94:	2d00      	cmp	r5, #0
 8004a96:	da03      	bge.n	8004aa0 <_printf_i+0xd0>
 8004a98:	232d      	movs	r3, #45	@ 0x2d
 8004a9a:	426d      	negs	r5, r5
 8004a9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004aa0:	4859      	ldr	r0, [pc, #356]	@ (8004c08 <_printf_i+0x238>)
 8004aa2:	230a      	movs	r3, #10
 8004aa4:	e011      	b.n	8004aca <_printf_i+0xfa>
 8004aa6:	6821      	ldr	r1, [r4, #0]
 8004aa8:	6833      	ldr	r3, [r6, #0]
 8004aaa:	0608      	lsls	r0, r1, #24
 8004aac:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ab0:	d402      	bmi.n	8004ab8 <_printf_i+0xe8>
 8004ab2:	0649      	lsls	r1, r1, #25
 8004ab4:	bf48      	it	mi
 8004ab6:	b2ad      	uxthmi	r5, r5
 8004ab8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004aba:	4853      	ldr	r0, [pc, #332]	@ (8004c08 <_printf_i+0x238>)
 8004abc:	6033      	str	r3, [r6, #0]
 8004abe:	bf14      	ite	ne
 8004ac0:	230a      	movne	r3, #10
 8004ac2:	2308      	moveq	r3, #8
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004aca:	6866      	ldr	r6, [r4, #4]
 8004acc:	60a6      	str	r6, [r4, #8]
 8004ace:	2e00      	cmp	r6, #0
 8004ad0:	bfa2      	ittt	ge
 8004ad2:	6821      	ldrge	r1, [r4, #0]
 8004ad4:	f021 0104 	bicge.w	r1, r1, #4
 8004ad8:	6021      	strge	r1, [r4, #0]
 8004ada:	b90d      	cbnz	r5, 8004ae0 <_printf_i+0x110>
 8004adc:	2e00      	cmp	r6, #0
 8004ade:	d04b      	beq.n	8004b78 <_printf_i+0x1a8>
 8004ae0:	4616      	mov	r6, r2
 8004ae2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ae6:	fb03 5711 	mls	r7, r3, r1, r5
 8004aea:	5dc7      	ldrb	r7, [r0, r7]
 8004aec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004af0:	462f      	mov	r7, r5
 8004af2:	42bb      	cmp	r3, r7
 8004af4:	460d      	mov	r5, r1
 8004af6:	d9f4      	bls.n	8004ae2 <_printf_i+0x112>
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d10b      	bne.n	8004b14 <_printf_i+0x144>
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	07df      	lsls	r7, r3, #31
 8004b00:	d508      	bpl.n	8004b14 <_printf_i+0x144>
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	6861      	ldr	r1, [r4, #4]
 8004b06:	4299      	cmp	r1, r3
 8004b08:	bfde      	ittt	le
 8004b0a:	2330      	movle	r3, #48	@ 0x30
 8004b0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b14:	1b92      	subs	r2, r2, r6
 8004b16:	6122      	str	r2, [r4, #16]
 8004b18:	f8cd a000 	str.w	sl, [sp]
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	aa03      	add	r2, sp, #12
 8004b20:	4621      	mov	r1, r4
 8004b22:	4640      	mov	r0, r8
 8004b24:	f7ff fee6 	bl	80048f4 <_printf_common>
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d14a      	bne.n	8004bc2 <_printf_i+0x1f2>
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	b004      	add	sp, #16
 8004b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	f043 0320 	orr.w	r3, r3, #32
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	4833      	ldr	r0, [pc, #204]	@ (8004c0c <_printf_i+0x23c>)
 8004b40:	2778      	movs	r7, #120	@ 0x78
 8004b42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	6831      	ldr	r1, [r6, #0]
 8004b4a:	061f      	lsls	r7, r3, #24
 8004b4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b50:	d402      	bmi.n	8004b58 <_printf_i+0x188>
 8004b52:	065f      	lsls	r7, r3, #25
 8004b54:	bf48      	it	mi
 8004b56:	b2ad      	uxthmi	r5, r5
 8004b58:	6031      	str	r1, [r6, #0]
 8004b5a:	07d9      	lsls	r1, r3, #31
 8004b5c:	bf44      	itt	mi
 8004b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b62:	6023      	strmi	r3, [r4, #0]
 8004b64:	b11d      	cbz	r5, 8004b6e <_printf_i+0x19e>
 8004b66:	2310      	movs	r3, #16
 8004b68:	e7ac      	b.n	8004ac4 <_printf_i+0xf4>
 8004b6a:	4827      	ldr	r0, [pc, #156]	@ (8004c08 <_printf_i+0x238>)
 8004b6c:	e7e9      	b.n	8004b42 <_printf_i+0x172>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	f023 0320 	bic.w	r3, r3, #32
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	e7f6      	b.n	8004b66 <_printf_i+0x196>
 8004b78:	4616      	mov	r6, r2
 8004b7a:	e7bd      	b.n	8004af8 <_printf_i+0x128>
 8004b7c:	6833      	ldr	r3, [r6, #0]
 8004b7e:	6825      	ldr	r5, [r4, #0]
 8004b80:	6961      	ldr	r1, [r4, #20]
 8004b82:	1d18      	adds	r0, r3, #4
 8004b84:	6030      	str	r0, [r6, #0]
 8004b86:	062e      	lsls	r6, r5, #24
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	d501      	bpl.n	8004b90 <_printf_i+0x1c0>
 8004b8c:	6019      	str	r1, [r3, #0]
 8004b8e:	e002      	b.n	8004b96 <_printf_i+0x1c6>
 8004b90:	0668      	lsls	r0, r5, #25
 8004b92:	d5fb      	bpl.n	8004b8c <_printf_i+0x1bc>
 8004b94:	8019      	strh	r1, [r3, #0]
 8004b96:	2300      	movs	r3, #0
 8004b98:	6123      	str	r3, [r4, #16]
 8004b9a:	4616      	mov	r6, r2
 8004b9c:	e7bc      	b.n	8004b18 <_printf_i+0x148>
 8004b9e:	6833      	ldr	r3, [r6, #0]
 8004ba0:	1d1a      	adds	r2, r3, #4
 8004ba2:	6032      	str	r2, [r6, #0]
 8004ba4:	681e      	ldr	r6, [r3, #0]
 8004ba6:	6862      	ldr	r2, [r4, #4]
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4630      	mov	r0, r6
 8004bac:	f7fb fb38 	bl	8000220 <memchr>
 8004bb0:	b108      	cbz	r0, 8004bb6 <_printf_i+0x1e6>
 8004bb2:	1b80      	subs	r0, r0, r6
 8004bb4:	6060      	str	r0, [r4, #4]
 8004bb6:	6863      	ldr	r3, [r4, #4]
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bc0:	e7aa      	b.n	8004b18 <_printf_i+0x148>
 8004bc2:	6923      	ldr	r3, [r4, #16]
 8004bc4:	4632      	mov	r2, r6
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4640      	mov	r0, r8
 8004bca:	47d0      	blx	sl
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d0ad      	beq.n	8004b2c <_printf_i+0x15c>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	079b      	lsls	r3, r3, #30
 8004bd4:	d413      	bmi.n	8004bfe <_printf_i+0x22e>
 8004bd6:	68e0      	ldr	r0, [r4, #12]
 8004bd8:	9b03      	ldr	r3, [sp, #12]
 8004bda:	4298      	cmp	r0, r3
 8004bdc:	bfb8      	it	lt
 8004bde:	4618      	movlt	r0, r3
 8004be0:	e7a6      	b.n	8004b30 <_printf_i+0x160>
 8004be2:	2301      	movs	r3, #1
 8004be4:	4632      	mov	r2, r6
 8004be6:	4649      	mov	r1, r9
 8004be8:	4640      	mov	r0, r8
 8004bea:	47d0      	blx	sl
 8004bec:	3001      	adds	r0, #1
 8004bee:	d09d      	beq.n	8004b2c <_printf_i+0x15c>
 8004bf0:	3501      	adds	r5, #1
 8004bf2:	68e3      	ldr	r3, [r4, #12]
 8004bf4:	9903      	ldr	r1, [sp, #12]
 8004bf6:	1a5b      	subs	r3, r3, r1
 8004bf8:	42ab      	cmp	r3, r5
 8004bfa:	dcf2      	bgt.n	8004be2 <_printf_i+0x212>
 8004bfc:	e7eb      	b.n	8004bd6 <_printf_i+0x206>
 8004bfe:	2500      	movs	r5, #0
 8004c00:	f104 0619 	add.w	r6, r4, #25
 8004c04:	e7f5      	b.n	8004bf2 <_printf_i+0x222>
 8004c06:	bf00      	nop
 8004c08:	08004d71 	.word	0x08004d71
 8004c0c:	08004d82 	.word	0x08004d82

08004c10 <memmove>:
 8004c10:	4288      	cmp	r0, r1
 8004c12:	b510      	push	{r4, lr}
 8004c14:	eb01 0402 	add.w	r4, r1, r2
 8004c18:	d902      	bls.n	8004c20 <memmove+0x10>
 8004c1a:	4284      	cmp	r4, r0
 8004c1c:	4623      	mov	r3, r4
 8004c1e:	d807      	bhi.n	8004c30 <memmove+0x20>
 8004c20:	1e43      	subs	r3, r0, #1
 8004c22:	42a1      	cmp	r1, r4
 8004c24:	d008      	beq.n	8004c38 <memmove+0x28>
 8004c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c2e:	e7f8      	b.n	8004c22 <memmove+0x12>
 8004c30:	4402      	add	r2, r0
 8004c32:	4601      	mov	r1, r0
 8004c34:	428a      	cmp	r2, r1
 8004c36:	d100      	bne.n	8004c3a <memmove+0x2a>
 8004c38:	bd10      	pop	{r4, pc}
 8004c3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c42:	e7f7      	b.n	8004c34 <memmove+0x24>

08004c44 <_sbrk_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	4d06      	ldr	r5, [pc, #24]	@ (8004c60 <_sbrk_r+0x1c>)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	602b      	str	r3, [r5, #0]
 8004c50:	f7fc ffd8 	bl	8001c04 <_sbrk>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d102      	bne.n	8004c5e <_sbrk_r+0x1a>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	b103      	cbz	r3, 8004c5e <_sbrk_r+0x1a>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
 8004c60:	2000028c 	.word	0x2000028c

08004c64 <memcpy>:
 8004c64:	440a      	add	r2, r1
 8004c66:	4291      	cmp	r1, r2
 8004c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c6c:	d100      	bne.n	8004c70 <memcpy+0xc>
 8004c6e:	4770      	bx	lr
 8004c70:	b510      	push	{r4, lr}
 8004c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c7a:	4291      	cmp	r1, r2
 8004c7c:	d1f9      	bne.n	8004c72 <memcpy+0xe>
 8004c7e:	bd10      	pop	{r4, pc}

08004c80 <_realloc_r>:
 8004c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c84:	4680      	mov	r8, r0
 8004c86:	4615      	mov	r5, r2
 8004c88:	460c      	mov	r4, r1
 8004c8a:	b921      	cbnz	r1, 8004c96 <_realloc_r+0x16>
 8004c8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c90:	4611      	mov	r1, r2
 8004c92:	f7ff bc4b 	b.w	800452c <_malloc_r>
 8004c96:	b92a      	cbnz	r2, 8004ca4 <_realloc_r+0x24>
 8004c98:	f7ff fbdc 	bl	8004454 <_free_r>
 8004c9c:	2400      	movs	r4, #0
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca4:	f000 f81a 	bl	8004cdc <_malloc_usable_size_r>
 8004ca8:	4285      	cmp	r5, r0
 8004caa:	4606      	mov	r6, r0
 8004cac:	d802      	bhi.n	8004cb4 <_realloc_r+0x34>
 8004cae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004cb2:	d8f4      	bhi.n	8004c9e <_realloc_r+0x1e>
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	f7ff fc38 	bl	800452c <_malloc_r>
 8004cbc:	4607      	mov	r7, r0
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d0ec      	beq.n	8004c9c <_realloc_r+0x1c>
 8004cc2:	42b5      	cmp	r5, r6
 8004cc4:	462a      	mov	r2, r5
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	bf28      	it	cs
 8004cca:	4632      	movcs	r2, r6
 8004ccc:	f7ff ffca 	bl	8004c64 <memcpy>
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	f7ff fbbe 	bl	8004454 <_free_r>
 8004cd8:	463c      	mov	r4, r7
 8004cda:	e7e0      	b.n	8004c9e <_realloc_r+0x1e>

08004cdc <_malloc_usable_size_r>:
 8004cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce0:	1f18      	subs	r0, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bfbc      	itt	lt
 8004ce6:	580b      	ldrlt	r3, [r1, r0]
 8004ce8:	18c0      	addlt	r0, r0, r3
 8004cea:	4770      	bx	lr

08004cec <_init>:
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cee:	bf00      	nop
 8004cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf2:	bc08      	pop	{r3}
 8004cf4:	469e      	mov	lr, r3
 8004cf6:	4770      	bx	lr

08004cf8 <_fini>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	bf00      	nop
 8004cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfe:	bc08      	pop	{r3}
 8004d00:	469e      	mov	lr, r3
 8004d02:	4770      	bx	lr
